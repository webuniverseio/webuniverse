{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/webuniverse/source/static/dest/js/main.js","path":"static/dest/js/main.js","modified":1},{"_id":"themes/webuniverse/source/static/dest/images/samples/image_square.jpg","path":"static/dest/images/samples/image_square.jpg","modified":1},{"_id":"themes/webuniverse/source/static/dest/images/samples/image_800.jpg","path":"static/dest/images/samples/image_800.jpg","modified":1},{"_id":"themes/webuniverse/source/static/dest/images/samples/image.jpg","path":"static/dest/images/samples/image.jpg","modified":1},{"_id":"themes/webuniverse/source/static/dest/images/samples/bg3.jpg","path":"static/dest/images/samples/bg3.jpg","modified":1},{"_id":"themes/webuniverse/source/static/dest/images/samples/bg2.jpg","path":"static/dest/images/samples/bg2.jpg","modified":1},{"_id":"themes/webuniverse/source/static/dest/images/samples/bg1.jpg","path":"static/dest/images/samples/bg1.jpg","modified":1},{"_id":"themes/webuniverse/source/static/dest/images/samples/bg0.jpg","path":"static/dest/images/samples/bg0.jpg","modified":1},{"_id":"themes/webuniverse/source/static/dest/images/samples/bg.png","path":"static/dest/images/samples/bg.png","modified":1},{"_id":"themes/webuniverse/source/static/dest/images/samples/bg.jpg","path":"static/dest/images/samples/bg.jpg","modified":1},{"_id":"themes/webuniverse/source/static/dest/images/samples/bg--small.jpg","path":"static/dest/images/samples/bg--small.jpg","modified":1},{"_id":"themes/webuniverse/source/static/dest/images/samples/bg--medium.jpg","path":"static/dest/images/samples/bg--medium.jpg","modified":1},{"_id":"themes/webuniverse/source/static/dest/images/samples/bg - Copy.jpg","path":"static/dest/images/samples/bg - Copy.jpg","modified":1},{"_id":"themes/webuniverse/source/static/dest/images/misc/webuniverse.png","path":"static/dest/images/misc/webuniverse.png","modified":1},{"_id":"themes/webuniverse/source/static/dest/images/misc/lt-ie9-white-opacity-80.png","path":"static/dest/images/misc/lt-ie9-white-opacity-80.png","modified":1},{"_id":"themes/webuniverse/source/static/dest/images/misc/lt-ie9-black-opacity-80.png","path":"static/dest/images/misc/lt-ie9-black-opacity-80.png","modified":1},{"_id":"themes/webuniverse/source/static/dest/images/misc/loading.gif","path":"static/dest/images/misc/loading.gif","modified":1},{"_id":"themes/webuniverse/source/static/dest/images/misc/load.gif","path":"static/dest/images/misc/load.gif","modified":1},{"_id":"themes/webuniverse/source/static/dest/images/misc/grey.gif","path":"static/dest/images/misc/grey.gif","modified":1},{"_id":"themes/webuniverse/source/static/dest/images/misc/controls.png","path":"static/dest/images/misc/controls.png","modified":1},{"_id":"themes/webuniverse/source/static/dest/images/misc/blank.gif","path":"static/dest/images/misc/blank.gif","modified":1},{"_id":"themes/webuniverse/source/static/dest/fonts/zerospace/ZeroSpace.woff","path":"static/dest/fonts/zerospace/ZeroSpace.woff","modified":1},{"_id":"themes/webuniverse/source/static/dest/fonts/zerospace/ZeroSpace.ttf","path":"static/dest/fonts/zerospace/ZeroSpace.ttf","modified":1},{"_id":"themes/webuniverse/source/static/dest/fonts/zerospace/ZeroSpace.eot","path":"static/dest/fonts/zerospace/ZeroSpace.eot","modified":1},{"_id":"themes/webuniverse/source/static/dest/fonts/sniglet/sniglet-extrabold-webfont.woff","path":"static/dest/fonts/sniglet/sniglet-extrabold-webfont.woff","modified":1},{"_id":"themes/webuniverse/source/static/dest/fonts/sniglet/sniglet-extrabold-webfont.ttf","path":"static/dest/fonts/sniglet/sniglet-extrabold-webfont.ttf","modified":1},{"_id":"themes/webuniverse/source/static/dest/fonts/sniglet/sniglet-extrabold-webfont.eot","path":"static/dest/fonts/sniglet/sniglet-extrabold-webfont.eot","modified":1},{"_id":"themes/webuniverse/source/static/dest/fonts/icomoon/selection.json","path":"static/dest/fonts/icomoon/selection.json","modified":1},{"_id":"themes/webuniverse/source/static/dest/fonts/icomoon/icomoon.woff","path":"static/dest/fonts/icomoon/icomoon.woff","modified":1},{"_id":"themes/webuniverse/source/static/dest/fonts/icomoon/icomoon.ttf","path":"static/dest/fonts/icomoon/icomoon.ttf","modified":1},{"_id":"themes/webuniverse/source/static/dest/fonts/icomoon/icomoon.svg","path":"static/dest/fonts/icomoon/icomoon.svg","modified":1},{"_id":"themes/webuniverse/source/static/dest/fonts/icomoon/icomoon.eot","path":"static/dest/fonts/icomoon/icomoon.eot","modified":1},{"_id":"themes/webuniverse/source/static/dest/fonts/icomoon/Read Me.txt","path":"static/dest/fonts/icomoon/Read Me.txt","modified":1},{"_id":"themes/webuniverse/source/static/dest/css/main.css.map","path":"static/dest/css/main.css.map","modified":1},{"_id":"themes/webuniverse/source/static/dest/css/main.css","path":"static/dest/css/main.css","modified":1},{"_id":"themes/webuniverse/source/robots.txt","path":"robots.txt","modified":1},{"_id":"themes/webuniverse/source/mstile-70x70.png","path":"mstile-70x70.png","modified":1},{"_id":"themes/webuniverse/source/mstile-310x310.png","path":"mstile-310x310.png","modified":1},{"_id":"themes/webuniverse/source/mstile-310x150.png","path":"mstile-310x150.png","modified":1},{"_id":"themes/webuniverse/source/mstile-150x150.png","path":"mstile-150x150.png","modified":1},{"_id":"themes/webuniverse/source/mstile-144x144.png","path":"mstile-144x144.png","modified":1},{"_id":"themes/webuniverse/source/favicon.ico","path":"favicon.ico","modified":1},{"_id":"themes/webuniverse/source/favicon-96x96.png","path":"favicon-96x96.png","modified":1},{"_id":"themes/webuniverse/source/favicon-32x32.png","path":"favicon-32x32.png","modified":1},{"_id":"themes/webuniverse/source/favicon-192x192.png","path":"favicon-192x192.png","modified":1},{"_id":"themes/webuniverse/source/favicon-16x16.png","path":"favicon-16x16.png","modified":1},{"_id":"themes/webuniverse/source/favicon-160x160.png","path":"favicon-160x160.png","modified":1},{"_id":"themes/webuniverse/source/browserconfig.xml","path":"browserconfig.xml","modified":1},{"_id":"themes/webuniverse/source/bower_components/picturefill/src/picturefill.js","path":"bower_components/picturefill/src/picturefill.js","modified":1},{"_id":"themes/webuniverse/source/bower_components/picturefill/src/external/matchmedia.js","path":"bower_components/picturefill/src/external/matchmedia.js","modified":1},{"_id":"themes/webuniverse/source/bower_components/picturefill/picturefill.json","path":"bower_components/picturefill/picturefill.json","modified":1},{"_id":"themes/webuniverse/source/bower_components/picturefill/package.json","path":"bower_components/picturefill/package.json","modified":1},{"_id":"themes/webuniverse/source/bower_components/picturefill/index.html","path":"bower_components/picturefill/index.html","modified":1},{"_id":"themes/webuniverse/source/bower_components/picturefill/gruntfile.js","path":"bower_components/picturefill/gruntfile.js","modified":1},{"_id":"themes/webuniverse/source/bower_components/picturefill/dist/picturefill.min.js","path":"bower_components/picturefill/dist/picturefill.min.js","modified":1},{"_id":"themes/webuniverse/source/bower_components/picturefill/dist/picturefill.js","path":"bower_components/picturefill/dist/picturefill.js","modified":1},{"_id":"themes/webuniverse/source/bower_components/picturefill/bower.json","path":"bower_components/picturefill/bower.json","modified":1},{"_id":"themes/webuniverse/source/bower_components/picturefill/README.md","path":"bower_components/picturefill/README.md","modified":1},{"_id":"themes/webuniverse/source/bower_components/picturefill/LICENSE","path":"bower_components/picturefill/LICENSE","modified":1},{"_id":"themes/webuniverse/source/bower_components/picturefill/CONTRIBUTING.md","path":"bower_components/picturefill/CONTRIBUTING.md","modified":1},{"_id":"themes/webuniverse/source/bower_components/picturefill/Authors.txt","path":"bower_components/picturefill/Authors.txt","modified":1},{"_id":"themes/webuniverse/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1},{"_id":"themes/webuniverse/source/apple-touch-icon-precomposed.png","path":"apple-touch-icon-precomposed.png","modified":1},{"_id":"themes/webuniverse/source/apple-touch-icon-76x76.png","path":"apple-touch-icon-76x76.png","modified":1},{"_id":"themes/webuniverse/source/apple-touch-icon-72x72.png","path":"apple-touch-icon-72x72.png","modified":1},{"_id":"themes/webuniverse/source/apple-touch-icon-60x60.png","path":"apple-touch-icon-60x60.png","modified":1},{"_id":"themes/webuniverse/source/apple-touch-icon-57x57.png","path":"apple-touch-icon-57x57.png","modified":1},{"_id":"themes/webuniverse/source/apple-touch-icon-180x180.png","path":"apple-touch-icon-180x180.png","modified":1},{"_id":"themes/webuniverse/source/apple-touch-icon-152x152.png","path":"apple-touch-icon-152x152.png","modified":1},{"_id":"themes/webuniverse/source/apple-touch-icon-144x144.png","path":"apple-touch-icon-144x144.png","modified":1},{"_id":"themes/webuniverse/source/apple-touch-icon-120x120.png","path":"apple-touch-icon-120x120.png","modified":1},{"_id":"themes/webuniverse/source/apple-touch-icon-114x114.png","path":"apple-touch-icon-114x114.png","modified":1},{"_id":"source/recommended/imageSmall.jpg","path":"recommended/imageSmall.jpg","modified":1},{"_id":"source/recommended/image.jpg","path":"recommended/image.jpg","modified":1},{"_id":"source/projects/imageSmall.jpg","path":"projects/imageSmall.jpg","modified":1},{"_id":"source/projects/image.jpg","path":"projects/image.jpg","modified":1},{"_id":"source/not-found/imageSmall.jpg","path":"not-found/imageSmall.jpg","modified":1},{"_id":"source/not-found/image.jpg","path":"not-found/image.jpg","modified":1},{"_id":"source/about/imageSmall.jpg","path":"about/imageSmall.jpg","modified":1},{"_id":"source/about/image.jpg","path":"about/image.jpg","modified":1}],"Cache":[{"_id":"themes/webuniverse/_config.yml","shasum":"731fd9c77c3d5e103e1553d842e08634c3e03f3f","modified":1426255722414},{"_id":"themes/webuniverse/layout/_partial/archive.ejs","shasum":"ac504af197fbcb19aaf73797b7865166547b86e2","modified":1426215339472},{"_id":"themes/webuniverse/layout/_partial/archive-post.ejs","shasum":"181a9d3aa93af72763420f6b3f8ab7c0aa059775","modified":1425784349422},{"_id":"themes/webuniverse/layout/_partial/article.ejs","shasum":"2664a40911207147ea05b81680d4756680aa8142","modified":1426297230692},{"_id":"themes/webuniverse/layout/_partial/disqus.ejs","shasum":"7cd073fcf3148549e356dc3a24cbb86180197fda","modified":1425784349423},{"_id":"themes/webuniverse/layout/_partial/footer.ejs","shasum":"cbcc4a84b976246e1cb736773a1c965588fe101b","modified":1425784349424},{"_id":"themes/webuniverse/layout/_partial/after-footer.ejs","shasum":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1425784349422},{"_id":"themes/webuniverse/layout/_partial/google-analytics.ejs","shasum":"3363bf8f42bdcddb98a3971131ea391cc714db4b","modified":1425784349425},{"_id":"themes/webuniverse/layout/_partial/google-font.ejs","shasum":"cbd2bd5a2502a749a5b4f6ff7ae0e3256a39f9fb","modified":1426289981058},{"_id":"themes/webuniverse/layout/_partial/google-search.ejs","shasum":"aa6efdb9876a43f9e889fb7bf4fa6c3dbf4b8d28","modified":1425784349425},{"_id":"themes/webuniverse/layout/_partial/header.ejs","shasum":"7a498e683d0d437ad8bcef0b63080c8a77e68a2e","modified":1425784349427},{"_id":"themes/webuniverse/layout/_partial/noscript.ejs","shasum":"f3c5d6e38391fc88e45d9ea874da03bd1d9b296f","modified":1425784349427},{"_id":"themes/webuniverse/layout/_partial/post/category.ejs","shasum":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1425784349428},{"_id":"themes/webuniverse/layout/_partial/post/date.ejs","shasum":"baab25340ee403adee0f8c58984823f76f7598ff","modified":1425784349429},{"_id":"themes/webuniverse/layout/_partial/post/gallery.ejs","shasum":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1425784349429},{"_id":"themes/webuniverse/layout/_partial/post/nav.ejs","shasum":"f26d30355ba9144c51e700e8edc6a4ab6144ff9a","modified":1425784349430},{"_id":"themes/webuniverse/layout/_partial/post/tag.ejs","shasum":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1425784349430},{"_id":"themes/webuniverse/layout/_partial/post/title.ejs","shasum":"b82cf4700289700cbed8907c12eedc5d939d8218","modified":1425784349431},{"_id":"themes/webuniverse/layout/_partial/page-template.ejs","shasum":"540b7dcbb577ad231a47b23ce210f953f5aa54d1","modified":1426297345291},{"_id":"themes/webuniverse/layout/_widget/archive.ejs","shasum":"985fbeb01142b9d526cda8ebc372c1d361d69a6b","modified":1425784349432},{"_id":"themes/webuniverse/layout/_widget/category.ejs","shasum":"36ab37878129d152e3cbdeb839c08e52af1acd58","modified":1425784349432},{"_id":"themes/webuniverse/layout/_widget/recent_posts.ejs","shasum":"feba7c00fa59ba13bf870b358a499fde4473d335","modified":1425784349433},{"_id":"themes/webuniverse/layout/_partial/head.ejs","shasum":"8dcd1e6abcdc7ba4d7544b77625bf47876ecc2d9","modified":1538953216894},{"_id":"themes/webuniverse/layout/_widget/tag.ejs","shasum":"b3f321ddda6be2702a286d5b11af9533509506fb","modified":1425784349433},{"_id":"themes/webuniverse/layout/about.ejs","shasum":"557ff787aeed3eeae7c67eac5a3b00f38b1756d0","modified":1425784349434},{"_id":"themes/webuniverse/layout/_widget/tagcloud.ejs","shasum":"34dc8cdd96cdb41dd11cb7513f13714373e5104a","modified":1425784349434},{"_id":"themes/webuniverse/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1425784349435},{"_id":"themes/webuniverse/layout/contact.ejs","shasum":"b00c10a28c32ec9f95818e721847f7e0e14113f0","modified":1425784349436},{"_id":"themes/webuniverse/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1425784349435},{"_id":"themes/webuniverse/layout/index.ejs","shasum":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1425784349436},{"_id":"themes/webuniverse/layout/_partial/top-bar.ejs","shasum":"a84720361b4d625733041b0b92afd582392a8ca4","modified":1426257935203},{"_id":"themes/webuniverse/layout/page.ejs","shasum":"ce875dc2062058baf9f9d47f35af710eb55a6772","modified":1425784349437},{"_id":"themes/webuniverse/layout/post.ejs","shasum":"42d61774534bb262c9db8f93856dd2025aaa3188","modified":1425784349438},{"_id":"themes/webuniverse/scripts/404handler.js","shasum":"de9137241404a20abd4f35f29df0bd546b64b232","modified":1538942862647},{"_id":"themes/webuniverse/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1425784349438},{"_id":"themes/webuniverse/scripts/cache-control.js","shasum":"b20093f1be0fba66758353335c638eb56f21ec29","modified":1538942874394},{"_id":"themes/webuniverse/scripts/fullUrl.js","shasum":"26917c5f41c849db5087655f739d41b8d6c6d5d6","modified":1425784349441},{"_id":"themes/webuniverse/scripts/security-headers.js","shasum":"c9e41253ebd1bbd74bfa6f26089851576c6366a6","modified":1540740248063},{"_id":"themes/webuniverse/source/apple-touch-icon-114x114.png","shasum":"91951542cc64e3d9da01c2e9dfcd6800e4fff5f0","modified":1425784349442},{"_id":"themes/webuniverse/source/apple-touch-icon-120x120.png","shasum":"6e663362a1aac79fc877c76326e5e04901fc733e","modified":1425784349443},{"_id":"themes/webuniverse/source/apple-touch-icon-144x144.png","shasum":"2c21f30fcf0ed6a0e674abb7c4a52e7d007e2e87","modified":1425784349443},{"_id":"themes/webuniverse/source/apple-touch-icon-152x152.png","shasum":"4373bcf2a4d49a99250ecd65f194c202be57b459","modified":1425784349444},{"_id":"themes/webuniverse/source/apple-touch-icon-180x180.png","shasum":"4e97c1a2b9c69c89a6112466a1668236682af68e","modified":1425784349444},{"_id":"themes/webuniverse/source/apple-touch-icon-57x57.png","shasum":"f5b340788032f2ee44fa9193eb74b97736ef4035","modified":1425784349445},{"_id":"themes/webuniverse/source/apple-touch-icon-60x60.png","shasum":"936be2ef837fed259d7108028879b5065e886434","modified":1425784349445},{"_id":"themes/webuniverse/source/apple-touch-icon-76x76.png","shasum":"0f5b0c38fd442418e40de04752661d7c260fe8ca","modified":1425784349446},{"_id":"themes/webuniverse/source/apple-touch-icon-72x72.png","shasum":"7b48793788a66e0e6ba4269fd8a2a61e813bad91","modified":1425784349446},{"_id":"themes/webuniverse/source/apple-touch-icon-precomposed.png","shasum":"776365c92b4245f9b75ab0c5208f8f90ff8436d3","modified":1425784349446},{"_id":"themes/webuniverse/source/bower_components/picturefill/LICENSE","shasum":"f38c82734753501a65b81cdf62470c5fa2582ecc","modified":1428279258280},{"_id":"themes/webuniverse/source/apple-touch-icon.png","shasum":"4e97c1a2b9c69c89a6112466a1668236682af68e","modified":1425784349447},{"_id":"themes/webuniverse/source/bower_components/picturefill/CONTRIBUTING.md","shasum":"79cd109dfa08691d8ca56672e78d188955106221","modified":1428279258254},{"_id":"themes/webuniverse/source/bower_components/picturefill/README.md","shasum":"62b0d55e5440c4e97f2df4bef37fa6eee2123b1d","modified":1428279258316},{"_id":"themes/webuniverse/source/bower_components/picturefill/bower.json","shasum":"fcb7a93ff80c43746f761108b09d617115f570b8","modified":1428279258331},{"_id":"themes/webuniverse/source/bower_components/picturefill/dist/picturefill.js","shasum":"f16d7d9f5043b74c5cbe48603227d53291492131","modified":1428279258365},{"_id":"themes/webuniverse/source/bower_components/picturefill/index.html","shasum":"934d0c6fc6bc394a59ca4080f97c407d6d7fa73b","modified":1428279258384},{"_id":"themes/webuniverse/source/bower_components/picturefill/package.json","shasum":"028b12b89c7cc1967a403e1a882083e5b1379c11","modified":1428279258392},{"_id":"themes/webuniverse/source/bower_components/picturefill/picturefill.json","shasum":"4fb9512cae9925f0db706068629362b9d7419597","modified":1428279258399},{"_id":"themes/webuniverse/source/bower_components/picturefill/dist/picturefill.min.js","shasum":"31c6cc35720fa39601d6bc12d9aa33f13a54f9da","modified":1428279258370},{"_id":"themes/webuniverse/source/bower_components/picturefill/src/external/matchmedia.js","shasum":"83da95d4f08c64d91c0c92d7d9b97319cd2b1396","modified":1428279258418},{"_id":"themes/webuniverse/source/bower_components/picturefill/src/picturefill.js","shasum":"3dafbd1c37c77b952f12e8830300bcbee03f4a25","modified":1428279258423},{"_id":"themes/webuniverse/source/favicon-16x16.png","shasum":"0789c1ea480842240e57d8928c2136e222a6b7b2","modified":1425784349448},{"_id":"themes/webuniverse/source/browserconfig.xml","shasum":"895223792d1ca2ba3d44eb6cb22db9807ba60f49","modified":1425784349447},{"_id":"themes/webuniverse/source/bower_components/picturefill/Authors.txt","shasum":"a1af2ac71b62f322cefc0c658efd828c3f8c1708","modified":1428279258214},{"_id":"themes/webuniverse/source/favicon-32x32.png","shasum":"ebad3e9a4f3f9bd6c10dcf59d5c3ab83cd2d8b0c","modified":1425784349449},{"_id":"themes/webuniverse/source/favicon-96x96.png","shasum":"0d05e36410e9d38e2211204eeb2cf8e0cdc2f249","modified":1425784349450},{"_id":"themes/webuniverse/source/bower_components/picturefill/gruntfile.js","shasum":"f7b4dca9f5eb52619c2f7c5d079847cb6efc5a84","modified":1428279258375},{"_id":"themes/webuniverse/source/favicon-192x192.png","shasum":"87fed527b31d63782588edc373417534d15cb26a","modified":1425784349449},{"_id":"themes/webuniverse/source/mstile-144x144.png","shasum":"ca4f5b51911881adc56697d6f5dfcd35decaef8c","modified":1425784349451},{"_id":"themes/webuniverse/source/favicon-160x160.png","shasum":"58e0d175f5ae0f58e25bf51b4d8334e7473ebac3","modified":1425784349448},{"_id":"themes/webuniverse/source/mstile-150x150.png","shasum":"26fe000c04cad474ea35852b380c4708cbfeb00b","modified":1425784349451},{"_id":"themes/webuniverse/source/mstile-310x150.png","shasum":"6519f15c31591b71108f4afd5b14f81dd0a8829f","modified":1425784349452},{"_id":"themes/webuniverse/source/mstile-70x70.png","shasum":"65747c39c338c16836598c90bf909ab292622dd5","modified":1425784349453},{"_id":"themes/webuniverse/source/static/dest/css/main.css.map","shasum":"f948150b3ab93145d0cc71edb2f09e91d0c2467c","modified":1540958476918},{"_id":"themes/webuniverse/source/static/dest/css/main.css","shasum":"43f9e22dfb40d7caf236ad474aa58e9d4f64be7e","modified":1540958476921},{"_id":"themes/webuniverse/source/static/dest/fonts/icomoon/icomoon.eot","shasum":"f2ddb35865e96e971adbacebec9a6c75dab8b795","modified":1425784349306},{"_id":"themes/webuniverse/source/robots.txt","shasum":"c5716c17b26dbe73f5dd471848927040fc2bcc06","modified":1426344664107},{"_id":"themes/webuniverse/source/static/dest/fonts/icomoon/icomoon.svg","shasum":"1d092b743253dae0e5d32758eb2cc580f1c75f23","modified":1425784349306},{"_id":"themes/webuniverse/source/static/dest/fonts/icomoon/icomoon.ttf","shasum":"91ed1e94c6fa9bda25efc471182c7546c48b03e0","modified":1425784349307},{"_id":"themes/webuniverse/source/static/dest/fonts/icomoon/icomoon.woff","shasum":"1b2c3fde74b9f1dc1dd52ec185f77d34261de0d1","modified":1425784349308},{"_id":"themes/webuniverse/source/static/dest/fonts/icomoon/selection.json","shasum":"42d8c792510355e2b200ae4d976c44ecbf2b3c3b","modified":1425784349310},{"_id":"themes/webuniverse/source/static/dest/fonts/sniglet/sniglet-extrabold-webfont.eot","shasum":"7179a6e10cc66f52cf17cc74e95d8e0949343746","modified":1425784349311},{"_id":"themes/webuniverse/source/static/dest/fonts/sniglet/sniglet-extrabold-webfont.ttf","shasum":"00976ee52d0b6ac4681a41788410ce99e556de26","modified":1425784349312},{"_id":"themes/webuniverse/source/static/dest/fonts/sniglet/sniglet-extrabold-webfont.woff","shasum":"940a6c8a5b06840078ecd98888ac22755301023d","modified":1425784349313},{"_id":"themes/webuniverse/source/static/dest/fonts/icomoon/Read Me.txt","shasum":"8f769482ad1d6740d5fc216219cd37682618d791","modified":1425784349305},{"_id":"themes/webuniverse/source/static/dest/fonts/zerospace/ZeroSpace.eot","shasum":"7b17283f48c07ef2fef4ebece3a4d46a13523463","modified":1425784349315},{"_id":"themes/webuniverse/source/static/dest/fonts/zerospace/ZeroSpace.ttf","shasum":"37edfa7aa286175660ac3073c7f646f6950464d3","modified":1425784349315},{"_id":"themes/webuniverse/source/static/dest/fonts/zerospace/ZeroSpace.woff","shasum":"30ef335208889f87883a275ccc2d40f252a9f48c","modified":1425784349316},{"_id":"themes/webuniverse/source/static/dest/images/misc/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1425784349318},{"_id":"themes/webuniverse/source/favicon.ico","shasum":"441993dc38068dd5a08083e9fc2ec8c943144262","modified":1425784349450},{"_id":"themes/webuniverse/source/static/dest/images/misc/grey.gif","shasum":"54a69da17972770faffce1f758c820ecb8e440af","modified":1425784349319},{"_id":"themes/webuniverse/source/static/dest/images/misc/loading.gif","shasum":"72998a116936156dc7cace0606dab499fe4f3ce8","modified":1425784349321},{"_id":"themes/webuniverse/source/mstile-310x310.png","shasum":"7919688bada2c68bfecb4cf698af22ab1cc03f74","modified":1425784349452},{"_id":"themes/webuniverse/source/static/dest/images/misc/load.gif","shasum":"a11e27326c8b0b08bd04a291da2ac651ff109037","modified":1425784349320},{"_id":"themes/webuniverse/source/static/dest/images/samples/bg--small.jpg","shasum":"bc1c93a6363711d0a94b823acf6c9ef7af975ef9","modified":1426352343317},{"_id":"themes/webuniverse/layout/layout.ejs","shasum":"c9909fc9cc93106d7e585e9926079d13301011a6","modified":1426296982081},{"_id":"themes/webuniverse/source/static/dest/images/misc/controls.png","shasum":"55d2d263d7197bcb277a15cfb216306b684cc966","modified":1425784349318},{"_id":"themes/webuniverse/source/static/dest/images/samples/bg.png","shasum":"100ddc224c0aea7df6fecf0129481d8576e76eab","modified":1426200957000},{"_id":"themes/webuniverse/source/static/dest/images/misc/lt-ie9-black-opacity-80.png","shasum":"daea330cb7aba26458ac61ab31d80e3da0b93d40","modified":1425784349322},{"_id":"themes/webuniverse/source/static/dest/images/misc/lt-ie9-white-opacity-80.png","shasum":"bb9ac674921fef7518f75746264b6f3f206a5c72","modified":1425784349323},{"_id":"themes/webuniverse/source/static/dest/images/samples/image.jpg","shasum":"2e831835be8eee4d4d87868ffa60a8b13a70bf10","modified":1425784349332},{"_id":"themes/webuniverse/source/static/dest/images/samples/image_800.jpg","shasum":"5dbff5ae2b88050eecce15790e7277c4ce96d9bd","modified":1426289227170},{"_id":"themes/webuniverse/source/static/dest/images/samples/image_square.jpg","shasum":"b04b1a87ce81527b5a43aa46f21d1d645d5c07e8","modified":1426289277833},{"_id":"themes/webuniverse/source/static/dest/js/main.js","shasum":"e38294effa9a2b321fb46b084d2f2d050e48e274","modified":1538972076466},{"_id":"themes/webuniverse/source/static/dest/images/misc/webuniverse.png","shasum":"e03ae272aeddc949f518efd5cb058881c02fbaac","modified":1425784349330},{"_id":"themes/webuniverse/source/static/dest/images/samples/bg--medium.jpg","shasum":"c5206eccb0220d52ad4661be071d23a21043879c","modified":1426352481319},{"_id":"themes/webuniverse/source/static/dest/images/samples/bg - Copy.jpg","shasum":"a93510cb4c760f73eb3b30a1ba8e63940351e6cc","modified":1426202010000},{"_id":"source/_posts/Getting-started-with-Reporting-API-Network-Error-Logging-Report-URI.md","shasum":"e8598c03d518c33bbb7271980404f977ca396536","modified":1540773069172},{"_id":"source/_posts/Getting-started-with-Reporting-API-Network-Error-Logging-Report-URI/imageSmall.jpg","shasum":"b920fb93c9100c3eec5fd358307d30972441dca4","modified":1540772927427},{"_id":"source/_posts/asynchronous-programming-with-ES6-generators-promises-and-npm-co/image.jpg","shasum":"d1b824169e76419cf2fe99fb4cd828d21a87c661","modified":1426350810372},{"_id":"source/_drafts/javascript-legacy-code-upgrade-strategy.md","shasum":"ed8649383ab9278fcb2fa0f22c3e44f994135f92","modified":1445796917692},{"_id":"source/_posts/asynchronous-programming-with-ES6-generators-promises-and-npm-co/imageSmall.jpg","shasum":"b8e0e590d773e565cecf2d361f4fb304900d0be8","modified":1426350835409},{"_id":"source/_posts/Getting-started-with-Reporting-API-Network-Error-Logging-Report-URI/image.jpg","shasum":"030c03090bb67e70aaf84733cedce860cdf5d46f","modified":1540772829047},{"_id":"source/_posts/css-organization-naming-conventions-and-safe-extend-without-preprocessors/imageSmall.jpg","shasum":"456d3201257996a74c44f57be8eadc1c6513e655","modified":1426351055279},{"_id":"source/_posts/Creating-publishing-a-browser-extension-or-How-changing-a-Stride-favicon-improved-my-performance-by-40.md","shasum":"6516a61fee4a4c44378db2bbff6f087ee3401c1c","modified":1540958165585},{"_id":"source/_posts/asynchronous-programming-with-ES6-generators-promises-and-npm-co.md","shasum":"cace0ae2542572fc205aeb316991b5008ceda8da","modified":1539013392869},{"_id":"source/_posts/css-organization-naming-conventions-and-safe-extend-without-preprocessors.md","shasum":"03f7c369ea21bab657a60940bfab87383cdb67e8","modified":1445797037557},{"_id":"source/_posts/manage-project-dependencies-with-simple-installer.md","shasum":"849e596876533b3ac379ddc0878ef53a308fb424","modified":1445796939569},{"_id":"source/_posts/cyclomatic-complexity-refactoring-tips.md","shasum":"8a3bfc8318d8195cdcfd4c88bf98123795845499","modified":1445797758231},{"_id":"source/contact/index.md","shasum":"14a2f0e34594e296c3c4a95c0dfe1f08bbd3b339","modified":1425784349209},{"_id":"source/about/image.jpg","shasum":"a01bd7a241b66a3bb92d33497472dd653604c9ef","modified":1426350392666},{"_id":"source/not-found/image.jpg","shasum":"934df9667af124e5f41715675f08fabb28f2285a","modified":1426350049088},{"_id":"source/not-found/index.md","shasum":"eaa0329743479d2a602e0b81fa5a42cd67608efe","modified":1426682315936},{"_id":"source/about/imageSmall.jpg","shasum":"9b41404a7d32110f1865181842708e8bfccd6b12","modified":1426350434688},{"_id":"source/not-found/imageSmall.jpg","shasum":"05da355b489ae52c61c06674abaeeb11034e6a4c","modified":1426350132437},{"_id":"source/projects/index.md","shasum":"d4f9bc38896f4e291863f581fe7194345b5c2cac","modified":1539013522328},{"_id":"source/projects/imageSmall.jpg","shasum":"10a17dbc975b38efea4c256a41034b33e491c224","modified":1426297759695},{"_id":"source/about/index.md","shasum":"135bf1231a4b4927ee9b7f32647d04e4e9b05662","modified":1539013496721},{"_id":"source/recommended/imageSmall.jpg","shasum":"bbc882c62e0dc5d153bd1b6225e80640c6562af3","modified":1426349563525},{"_id":"source/_posts/css-organization-naming-conventions-and-safe-extend-without-preprocessors/image.jpg","shasum":"fd05d038fd760b282e203dd05800875c7b741e4c","modified":1426351015737},{"_id":"source/projects/image.jpg","shasum":"86be6608cfda9c5165fa3ad32d36c7272650662d","modified":1426349829371},{"_id":"source/recommended/index.md","shasum":"c79924c38e7aff4f8b439582806fff03f0141949","modified":1539013782033},{"_id":"source/_posts/cyclomatic-complexity-refactoring-tips/imageSmall.jpg","shasum":"ddcdacc1d3515fac923134bf450d2967c660fd41","modified":1445655975039},{"_id":"source/recommended/image.jpg","shasum":"74b4028f5a0d174daf48dacead2d2ad8a772a1e2","modified":1426349516205},{"_id":"source/_posts/cyclomatic-complexity-refactoring-tips/image.jpg","shasum":"eb1f25a908cff3e54259a2a54517f90c3581277f","modified":1445652373926},{"_id":"themes/webuniverse/source/static/dest/images/samples/bg0.jpg","shasum":"efba1986252bb88068ddb20f0a859cb06670433e","modified":1425784349480},{"_id":"themes/webuniverse/source/static/dest/images/samples/bg2.jpg","shasum":"bf9608147bde07f3b238cd3a35fd11fdc59759fa","modified":1425784349559},{"_id":"source/_posts/manage-project-dependencies-with-simple-installer/imageSmall.png","shasum":"405da3cce949f85e2aa96fab84c59db8ca2467c5","modified":1428281789146},{"_id":"themes/webuniverse/source/static/dest/images/samples/bg3.jpg","shasum":"bc6fd6768feb75d047914a432ba026d22e2ac6f3","modified":1425784349575},{"_id":"themes/webuniverse/source/static/dest/images/samples/bg1.jpg","shasum":"f8dc0400145c03cbbbaaceac04fe6fe241d502fd","modified":1425784349539},{"_id":"source/_posts/manage-project-dependencies-with-simple-installer/image.png","shasum":"1e5d18f82e30c38977a713c3e63588ec3b91590b","modified":1428281495115},{"_id":"themes/webuniverse/source/static/dest/images/samples/bg.jpg","shasum":"a93510cb4c760f73eb3b30a1ba8e63940351e6cc","modified":1426202010202},{"_id":"source/_posts/manage-project-dependencies-with-simple-installer/simple-installer.gif","shasum":"a2d47e0714abcdbed6e435e6827f1bd5cccef2fd","modified":1428279469941},{"_id":"public/static/dest/js/main.js","modified":1540958618256,"shasum":"e38294effa9a2b321fb46b084d2f2d050e48e274"},{"_id":"public/static/dest/images/samples/image_square.jpg","modified":1540958618857,"shasum":"b04b1a87ce81527b5a43aa46f21d1d645d5c07e8"},{"_id":"public/static/dest/images/samples/image_800.jpg","modified":1540958618865,"shasum":"5dbff5ae2b88050eecce15790e7277c4ce96d9bd"},{"_id":"public/static/dest/images/samples/image.jpg","modified":1540958618868,"shasum":"2e831835be8eee4d4d87868ffa60a8b13a70bf10"},{"_id":"public/static/dest/images/samples/bg3.jpg","modified":1540958618874,"shasum":"bc6fd6768feb75d047914a432ba026d22e2ac6f3"},{"_id":"public/static/dest/images/samples/bg2.jpg","modified":1540958618882,"shasum":"bf9608147bde07f3b238cd3a35fd11fdc59759fa"},{"_id":"public/static/dest/images/samples/bg1.jpg","modified":1540958618892,"shasum":"f8dc0400145c03cbbbaaceac04fe6fe241d502fd"},{"_id":"public/static/dest/images/samples/bg0.jpg","modified":1540958618899,"shasum":"efba1986252bb88068ddb20f0a859cb06670433e"},{"_id":"public/static/dest/images/samples/bg.png","modified":1540958618904,"shasum":"100ddc224c0aea7df6fecf0129481d8576e76eab"},{"_id":"public/static/dest/images/samples/bg.jpg","modified":1540958618909,"shasum":"a93510cb4c760f73eb3b30a1ba8e63940351e6cc"},{"_id":"public/static/dest/images/samples/bg--small.jpg","modified":1540958618913,"shasum":"bc1c93a6363711d0a94b823acf6c9ef7af975ef9"},{"_id":"public/static/dest/images/samples/bg--medium.jpg","modified":1540958618917,"shasum":"c5206eccb0220d52ad4661be071d23a21043879c"},{"_id":"public/static/dest/images/samples/bg - Copy.jpg","modified":1540958618922,"shasum":"a93510cb4c760f73eb3b30a1ba8e63940351e6cc"},{"_id":"public/static/dest/images/misc/webuniverse.png","modified":1540958618928,"shasum":"e03ae272aeddc949f518efd5cb058881c02fbaac"},{"_id":"public/static/dest/images/misc/lt-ie9-white-opacity-80.png","modified":1540958618933,"shasum":"bb9ac674921fef7518f75746264b6f3f206a5c72"},{"_id":"public/static/dest/images/misc/lt-ie9-black-opacity-80.png","modified":1540958618936,"shasum":"daea330cb7aba26458ac61ab31d80e3da0b93d40"},{"_id":"public/static/dest/images/misc/loading.gif","modified":1540958618939,"shasum":"72998a116936156dc7cace0606dab499fe4f3ce8"},{"_id":"public/static/dest/images/misc/load.gif","modified":1540958618943,"shasum":"a11e27326c8b0b08bd04a291da2ac651ff109037"},{"_id":"public/static/dest/images/misc/grey.gif","modified":1540958618946,"shasum":"54a69da17972770faffce1f758c820ecb8e440af"},{"_id":"public/static/dest/images/misc/controls.png","modified":1540958618949,"shasum":"55d2d263d7197bcb277a15cfb216306b684cc966"},{"_id":"public/static/dest/images/misc/blank.gif","modified":1540958619052,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/static/dest/fonts/zerospace/ZeroSpace.woff","modified":1540958619055,"shasum":"30ef335208889f87883a275ccc2d40f252a9f48c"},{"_id":"public/static/dest/fonts/zerospace/ZeroSpace.ttf","modified":1540958619059,"shasum":"37edfa7aa286175660ac3073c7f646f6950464d3"},{"_id":"public/static/dest/fonts/zerospace/ZeroSpace.eot","modified":1540958619061,"shasum":"7b17283f48c07ef2fef4ebece3a4d46a13523463"},{"_id":"public/static/dest/fonts/sniglet/sniglet-extrabold-webfont.woff","modified":1540958619063,"shasum":"940a6c8a5b06840078ecd98888ac22755301023d"},{"_id":"public/static/dest/fonts/sniglet/sniglet-extrabold-webfont.ttf","modified":1540958619068,"shasum":"00976ee52d0b6ac4681a41788410ce99e556de26"},{"_id":"public/static/dest/fonts/sniglet/sniglet-extrabold-webfont.eot","modified":1540958619072,"shasum":"7179a6e10cc66f52cf17cc74e95d8e0949343746"},{"_id":"public/static/dest/fonts/icomoon/selection.json","modified":1540958619076,"shasum":"847d11338125a4ad5e7f591b2b792087fe262377"},{"_id":"public/static/dest/fonts/icomoon/icomoon.woff","modified":1540958619078,"shasum":"1b2c3fde74b9f1dc1dd52ec185f77d34261de0d1"},{"_id":"public/static/dest/fonts/icomoon/icomoon.ttf","modified":1540958619081,"shasum":"91ed1e94c6fa9bda25efc471182c7546c48b03e0"},{"_id":"public/static/dest/fonts/icomoon/icomoon.svg","modified":1540958619083,"shasum":"1d092b743253dae0e5d32758eb2cc580f1c75f23"},{"_id":"public/static/dest/fonts/icomoon/icomoon.eot","modified":1540958619086,"shasum":"f2ddb35865e96e971adbacebec9a6c75dab8b795"},{"_id":"public/static/dest/fonts/icomoon/Read Me.txt","modified":1540958619089,"shasum":"8f769482ad1d6740d5fc216219cd37682618d791"},{"_id":"public/static/dest/css/main.css.map","modified":1540958619092,"shasum":"f948150b3ab93145d0cc71edb2f09e91d0c2467c"},{"_id":"public/static/dest/css/main.css","modified":1540958619098,"shasum":"7a28a9f22bf926159370ce3f2e564a84848b91f1"},{"_id":"public/robots.txt","modified":1540958619103,"shasum":"c5716c17b26dbe73f5dd471848927040fc2bcc06"},{"_id":"public/mstile-70x70.png","modified":1540958619107,"shasum":"65747c39c338c16836598c90bf909ab292622dd5"},{"_id":"public/mstile-310x310.png","modified":1540958619111,"shasum":"7919688bada2c68bfecb4cf698af22ab1cc03f74"},{"_id":"public/mstile-310x150.png","modified":1540958619115,"shasum":"6519f15c31591b71108f4afd5b14f81dd0a8829f"},{"_id":"public/mstile-150x150.png","modified":1540958619119,"shasum":"26fe000c04cad474ea35852b380c4708cbfeb00b"},{"_id":"public/mstile-144x144.png","modified":1540958619125,"shasum":"ca4f5b51911881adc56697d6f5dfcd35decaef8c"},{"_id":"public/favicon.ico","modified":1540958619128,"shasum":"441993dc38068dd5a08083e9fc2ec8c943144262"},{"_id":"public/favicon-96x96.png","modified":1540958619131,"shasum":"0d05e36410e9d38e2211204eeb2cf8e0cdc2f249"},{"_id":"public/favicon-32x32.png","modified":1540958619135,"shasum":"ebad3e9a4f3f9bd6c10dcf59d5c3ab83cd2d8b0c"},{"_id":"public/favicon-192x192.png","modified":1540958619139,"shasum":"87fed527b31d63782588edc373417534d15cb26a"},{"_id":"public/favicon-16x16.png","modified":1540958619144,"shasum":"0789c1ea480842240e57d8928c2136e222a6b7b2"},{"_id":"public/favicon-160x160.png","modified":1540958619147,"shasum":"58e0d175f5ae0f58e25bf51b4d8334e7473ebac3"},{"_id":"public/browserconfig.xml","modified":1540958619153,"shasum":"895223792d1ca2ba3d44eb6cb22db9807ba60f49"},{"_id":"public/bower_components/picturefill/src/picturefill.js","modified":1540958619158,"shasum":"3dafbd1c37c77b952f12e8830300bcbee03f4a25"},{"_id":"public/bower_components/picturefill/src/external/matchmedia.js","modified":1540958619164,"shasum":"83da95d4f08c64d91c0c92d7d9b97319cd2b1396"},{"_id":"public/bower_components/picturefill/picturefill.json","modified":1540958619167,"shasum":"c7f457b199d13312108c3bfe287bc5ffb2d8cfd3"},{"_id":"public/bower_components/picturefill/package.json","modified":1540958619171,"shasum":"ae49285e2986206fb016f123ec17ddb6d81a14dc"},{"_id":"public/bower_components/picturefill/index.html","modified":1540958619174,"shasum":"934d0c6fc6bc394a59ca4080f97c407d6d7fa73b"},{"_id":"public/bower_components/picturefill/gruntfile.js","modified":1540958619210,"shasum":"f7b4dca9f5eb52619c2f7c5d079847cb6efc5a84"},{"_id":"public/bower_components/picturefill/dist/picturefill.min.js","modified":1540958619214,"shasum":"31c6cc35720fa39601d6bc12d9aa33f13a54f9da"},{"_id":"public/bower_components/picturefill/dist/picturefill.js","modified":1540958619217,"shasum":"f16d7d9f5043b74c5cbe48603227d53291492131"},{"_id":"public/bower_components/picturefill/bower.json","modified":1540958619221,"shasum":"ada4f52b51e305bf8629477cfc08f5ec96d54bfd"},{"_id":"public/bower_components/picturefill/README.html","modified":1540958619224,"shasum":"23966570a16273b0fd4ffd2efc68b9475f2cf4fe"},{"_id":"public/bower_components/picturefill/LICENSE","modified":1540958619228,"shasum":"f38c82734753501a65b81cdf62470c5fa2582ecc"},{"_id":"public/bower_components/picturefill/CONTRIBUTING.html","modified":1540958619233,"shasum":"0d8c16437f3addc2ed7a968aad2255ea981ed723"},{"_id":"public/bower_components/picturefill/Authors.txt","modified":1540958619242,"shasum":"a1af2ac71b62f322cefc0c658efd828c3f8c1708"},{"_id":"public/apple-touch-icon.png","modified":1540958619245,"shasum":"4e97c1a2b9c69c89a6112466a1668236682af68e"},{"_id":"public/apple-touch-icon-precomposed.png","modified":1540958619249,"shasum":"776365c92b4245f9b75ab0c5208f8f90ff8436d3"},{"_id":"public/apple-touch-icon-76x76.png","modified":1540958619255,"shasum":"0f5b0c38fd442418e40de04752661d7c260fe8ca"},{"_id":"public/apple-touch-icon-72x72.png","modified":1540958619258,"shasum":"7b48793788a66e0e6ba4269fd8a2a61e813bad91"},{"_id":"public/apple-touch-icon-60x60.png","modified":1540958619261,"shasum":"936be2ef837fed259d7108028879b5065e886434"},{"_id":"public/apple-touch-icon-57x57.png","modified":1540958619263,"shasum":"f5b340788032f2ee44fa9193eb74b97736ef4035"},{"_id":"public/apple-touch-icon-180x180.png","modified":1540958619266,"shasum":"4e97c1a2b9c69c89a6112466a1668236682af68e"},{"_id":"public/apple-touch-icon-152x152.png","modified":1540958619307,"shasum":"4373bcf2a4d49a99250ecd65f194c202be57b459"},{"_id":"public/apple-touch-icon-144x144.png","modified":1540958619313,"shasum":"2c21f30fcf0ed6a0e674abb7c4a52e7d007e2e87"},{"_id":"public/apple-touch-icon-120x120.png","modified":1540958619317,"shasum":"6e663362a1aac79fc877c76326e5e04901fc733e"},{"_id":"public/apple-touch-icon-114x114.png","modified":1540958619323,"shasum":"91951542cc64e3d9da01c2e9dfcd6800e4fff5f0"},{"_id":"public/recommended/imageSmall.jpg","modified":1540958619325,"shasum":"bbc882c62e0dc5d153bd1b6225e80640c6562af3"},{"_id":"public/recommended/image.jpg","modified":1540958619329,"shasum":"74b4028f5a0d174daf48dacead2d2ad8a772a1e2"},{"_id":"public/projects/imageSmall.jpg","modified":1540958619332,"shasum":"10a17dbc975b38efea4c256a41034b33e491c224"},{"_id":"public/projects/image.jpg","modified":1540958619336,"shasum":"86be6608cfda9c5165fa3ad32d36c7272650662d"},{"_id":"public/not-found/imageSmall.jpg","modified":1540958619344,"shasum":"05da355b489ae52c61c06674abaeeb11034e6a4c"},{"_id":"public/not-found/image.jpg","modified":1540958619395,"shasum":"934df9667af124e5f41715675f08fabb28f2285a"},{"_id":"public/about/imageSmall.jpg","modified":1540958619397,"shasum":"9b41404a7d32110f1865181842708e8bfccd6b12"},{"_id":"public/about/image.jpg","modified":1540958619407,"shasum":"a01bd7a241b66a3bb92d33497472dd653604c9ef"},{"_id":"public/manage-project-dependencies-with-simple-installer/image.png","modified":1540958619414,"shasum":"1e5d18f82e30c38977a713c3e63588ec3b91590b"},{"_id":"public/manage-project-dependencies-with-simple-installer/imageSmall.png","modified":1540958619423,"shasum":"405da3cce949f85e2aa96fab84c59db8ca2467c5"},{"_id":"public/manage-project-dependencies-with-simple-installer/simple-installer.gif","modified":1540958619429,"shasum":"a2d47e0714abcdbed6e435e6827f1bd5cccef2fd"},{"_id":"public/cyclomatic-complexity-refactoring-tips/image.jpg","modified":1540958619434,"shasum":"eb1f25a908cff3e54259a2a54517f90c3581277f"},{"_id":"public/cyclomatic-complexity-refactoring-tips/imageSmall.jpg","modified":1540958619439,"shasum":"ddcdacc1d3515fac923134bf450d2967c660fd41"},{"_id":"public/css-organization-naming-conventions-and-safe-extend-without-preprocessors/image.jpg","modified":1540958619442,"shasum":"fd05d038fd760b282e203dd05800875c7b741e4c"},{"_id":"public/css-organization-naming-conventions-and-safe-extend-without-preprocessors/imageSmall.jpg","modified":1540958619447,"shasum":"456d3201257996a74c44f57be8eadc1c6513e655"},{"_id":"public/asynchronous-programming-with-ES6-generators-promises-and-npm-co/image.jpg","modified":1540958619451,"shasum":"d1b824169e76419cf2fe99fb4cd828d21a87c661"},{"_id":"public/asynchronous-programming-with-ES6-generators-promises-and-npm-co/imageSmall.jpg","modified":1540958619456,"shasum":"b8e0e590d773e565cecf2d361f4fb304900d0be8"},{"_id":"public/Getting-started-with-Reporting-API-Network-Error-Logging-Report-URI/image.jpg","modified":1540958619459,"shasum":"030c03090bb67e70aaf84733cedce860cdf5d46f"},{"_id":"public/Getting-started-with-Reporting-API-Network-Error-Logging-Report-URI/imageSmall.jpg","modified":1540958619463,"shasum":"b920fb93c9100c3eec5fd358307d30972441dca4"},{"_id":"public/recommended/index.html","modified":1540958623047,"shasum":"bf12ef1e55d5c031afff0b22787402be78c4ac07"},{"_id":"public/projects/index.html","modified":1540958623082,"shasum":"d3ec9a27b9cf31a5bb29a3650463ede10601e571"},{"_id":"public/not-found/index.html","modified":1540958623113,"shasum":"5e3ee5a7a8874ac2bf104da14c78c166047e0e46"},{"_id":"public/contact/index.html","modified":1540958623144,"shasum":"41e32025607640dcfeac75fb4c8b476922866531"},{"_id":"public/about/index.html","modified":1540958623208,"shasum":"d5b8ef6598cef919522d4fc5d48997283c51396f"},{"_id":"public/Creating-publishing-a-browser-extension-or-How-changing-a-Stride-favicon-improved-my-performance-by-40/index.html","modified":1540958623297,"shasum":"ec372d2c371204ce20c6f1c6eb5cb3803cc1c96f"},{"_id":"public/Getting-started-with-Reporting-API-Network-Error-Logging-Report-URI/index.html","modified":1540958623347,"shasum":"812e432fc414bb166aa5f312935faa5d793c4a13"},{"_id":"public/cyclomatic-complexity-refactoring-tips/index.html","modified":1540958623763,"shasum":"1f91dd97bab3a7ce69869e5ca4c495da512a6231"},{"_id":"public/manage-project-dependencies-with-simple-installer/index.html","modified":1540958623825,"shasum":"fa38b53d7644d234f87cbfc4ce0d7c44da7eb6ee"},{"_id":"public/css-organization-naming-conventions-and-safe-extend-without-preprocessors/index.html","modified":1540958623909,"shasum":"58802d0f1c2f61e6f2ac962ccf4964a671fd44f0"},{"_id":"public/asynchronous-programming-with-ES6-generators-promises-and-npm-co/index.html","modified":1540958623972,"shasum":"0fe783f68ee9d9dbdd61cc4c464b2229b7d4aea5"},{"_id":"public/index.html","modified":1540958624035,"shasum":"1d771df1318470cdac894781926545b2d1ae73dd"},{"_id":"public/atom.xml","modified":1540958624040,"shasum":"fc32ad1c8c2d2a0159e57dfacdb25839abba1f34"},{"_id":"public/sitemap.xml","modified":1540958624043,"shasum":"7a16ec6d940e06d7db917d3c3f4ddc3a93f28dfe"}],"Category":[],"Data":[],"Page":[{"title":"Recommended","date":"2015-01-20T00:36:23.000Z","overview":"Recommended articles, blogs and books for professional web developers","image":"image.jpg?v=1","imageSmall":"imageSmall.jpg","_content":"- http://www.2ality.com/ - Tons and tons of useful information about next version of javascript (ES6) and more\n- http://addyosmani.com/blog/ - Advanced level articles about javascript architecture and web performance\n- http://csswizardry.com/#section:articles - CSS may end up being a nightmare if you don't take care to structure it well. You'll find everything you need to know about CSS in that blog\n- http://css-tricks.com/ - Blog with tons of posts about web development. Great source for beginner-intermediate level\n- http://geek-and-poke.com/ - Smart humor about software development\n- http://www.stevesouders.com/blog - Web performance the right way\n- http://www.html5rocks.com/en/tutorials/ - Bleeding edge web technology tutorials\n- http://javascriptweekly.com/ - Be part of javascript community, get updates weekly\n- http://blog.jetbrains.com/webstorm/ - Detailed feature overview of the best IDE for javascript\n- http://ejohn.org/ - Useful articles from the author of jQuery\n- http://www.nczonline.net/blog/ - Unique articles about web development, work relationship and many more\n- http://nodeweekly.com/ - Weekly news from nodejs (and IO.js) world\n- http://blog.npmjs.org/ - News about node package management\n- http://perfectionkills.com/ - Always high level, ultimate quality posts about web development\n- http://dmitrysoshnikov.com/ - Learn how javascript is working on the core level. Ecmascript specifications translated to the human language\n- https://serversforhackers.com/ - Great tutorials and articles about server configuration\n- http://goo.gl/7zaoGm - Clean Code book, learn how to write a professional code\n- http://goo.gl/dRXk1T - Clean Coder book, learn how to be a professional developer. When and how to say No and feel good about it. How to say Yes and what exactly it means. Any many more","source":"recommended/index.md","raw":"title: Recommended\ndate: 2015-01-19 19:36:23\noverview: Recommended articles, blogs and books for professional web developers\nimage: image.jpg?v=1\nimageSmall: imageSmall.jpg\n---\n- http://www.2ality.com/ - Tons and tons of useful information about next version of javascript (ES6) and more\n- http://addyosmani.com/blog/ - Advanced level articles about javascript architecture and web performance\n- http://csswizardry.com/#section:articles - CSS may end up being a nightmare if you don't take care to structure it well. You'll find everything you need to know about CSS in that blog\n- http://css-tricks.com/ - Blog with tons of posts about web development. Great source for beginner-intermediate level\n- http://geek-and-poke.com/ - Smart humor about software development\n- http://www.stevesouders.com/blog - Web performance the right way\n- http://www.html5rocks.com/en/tutorials/ - Bleeding edge web technology tutorials\n- http://javascriptweekly.com/ - Be part of javascript community, get updates weekly\n- http://blog.jetbrains.com/webstorm/ - Detailed feature overview of the best IDE for javascript\n- http://ejohn.org/ - Useful articles from the author of jQuery\n- http://www.nczonline.net/blog/ - Unique articles about web development, work relationship and many more\n- http://nodeweekly.com/ - Weekly news from nodejs (and IO.js) world\n- http://blog.npmjs.org/ - News about node package management\n- http://perfectionkills.com/ - Always high level, ultimate quality posts about web development\n- http://dmitrysoshnikov.com/ - Learn how javascript is working on the core level. Ecmascript specifications translated to the human language\n- https://serversforhackers.com/ - Great tutorials and articles about server configuration\n- http://goo.gl/7zaoGm - Clean Code book, learn how to write a professional code\n- http://goo.gl/dRXk1T - Clean Coder book, learn how to be a professional developer. When and how to say No and feel good about it. How to say Yes and what exactly it means. Any many more","updated":"2018-10-08T15:49:42.033Z","path":"recommended/index.html","comments":1,"layout":"page","_id":"cjnwmyod2000134clads12oyf"},{"title":"Projects","date":"2015-01-20T01:36:14.000Z","overview":"Wonderful open source projects to ease your development life","image":"image.jpg?v=1","imageSmall":"imageSmall.jpg","_content":"Quick overview of projects I've had a wonderful time working on...\n\n## [SimpleInstaller](https://github.com/szarouski/SimpleInstaller)\nDownload and/or install programs in similar manner to chocolatey or similar installation managers.\n- crossplatform (tested on windows and debian)\n- downloads files (optional) and runs commands\n- skips already installed programs\n- could be used as a simple task runner\n- could work as a downloader\n- simple and because of that flexible and expendable api\n- tested with 100% coverage\n- uses harmony mode for generators and `npm co` to manage execution flow\n\n## [Sandbox](https://github.com/szarouski/sandbox)\nThis little library was designed for modular architectures ([1](https://www.youtube.com/watch?v=b5pFv9NB9fs), [2](http://www.addyosmani.com/scalablejs/)) to unify API between stand alone modules. It is crossbrowser and crossplatform with 100% coverage.\nThere are a few simple requirements for it to work effectively:\n* your modules should never auto-initialize as they are loading\n<small>Doing this will make sure that your code doesn't depend on the order in which your modules are loading  and you can get a benefit of `'async'` attribute that way, which can increase performance by an order of magnitude.</small>\n* there always should be an initialization method\n* you initialize a new instance of sandbox and pass it into initialization calls of your modules\n\nList of benefits you'll get from using sandbox:\n* unified module initialization api\n* Sandbox supports publish/subscribe pattern, and provides additional methods to control permissions for message delivery. So you can control whether one module can communicate with a sibling module, with a sub-module or even with the core\n* Sandbox has various caching strategies which will help to deal with asynchronous nature of AMD or ES6 modules\n<small>That way you really stop caring about order in which your modules are initialized, you can always cache events from one module and do lazy initialization when another module loads</small>\n* data, passed through Sandbox will become immutable, meaning that you can safely pass objects without fear that one of the modules can modify 'shared' state\n\n## [Lodash traverse](https://github.com/szarouski/lodash.dom-traverse)\nNative browser support allows you to traverse and select DOM using `'querySelector'`, `'insertAdjacentHTML'`, `'parent'`, and other API methods. But there are a few cases when it is not flexible/compatible enough and that is why jQuery is around. Lodash traverse is a tiny addon which provides a dozen of useful, chainable methods which in addition to native APIs give you minimalistic, yet ultimate control over your html. In combination with other [micro libraries](http://microjs.com/) you can assemble a highly customizable and slim in size library for your favorite projects.\n \n## [Simple permissions](https://github.com/szarouski/simple-permissions)\nNothing crazy, just a small library which allows you to add or remove multiple permissions for multiple targets. Crossbrowser and crossplatform with 100% coverage.\n","source":"projects/index.md","raw":"title: Projects\ndate: 2015-01-19 20:36:14\noverview: Wonderful open source projects to ease your development life\nimage: image.jpg?v=1\nimageSmall: imageSmall.jpg\n---\nQuick overview of projects I've had a wonderful time working on...\n\n## [SimpleInstaller](https://github.com/szarouski/SimpleInstaller)\nDownload and/or install programs in similar manner to chocolatey or similar installation managers.\n- crossplatform (tested on windows and debian)\n- downloads files (optional) and runs commands\n- skips already installed programs\n- could be used as a simple task runner\n- could work as a downloader\n- simple and because of that flexible and expendable api\n- tested with 100% coverage\n- uses harmony mode for generators and `npm co` to manage execution flow\n\n## [Sandbox](https://github.com/szarouski/sandbox)\nThis little library was designed for modular architectures ([1](https://www.youtube.com/watch?v=b5pFv9NB9fs), [2](http://www.addyosmani.com/scalablejs/)) to unify API between stand alone modules. It is crossbrowser and crossplatform with 100% coverage.\nThere are a few simple requirements for it to work effectively:\n* your modules should never auto-initialize as they are loading\n<small>Doing this will make sure that your code doesn't depend on the order in which your modules are loading  and you can get a benefit of `'async'` attribute that way, which can increase performance by an order of magnitude.</small>\n* there always should be an initialization method\n* you initialize a new instance of sandbox and pass it into initialization calls of your modules\n\nList of benefits you'll get from using sandbox:\n* unified module initialization api\n* Sandbox supports publish/subscribe pattern, and provides additional methods to control permissions for message delivery. So you can control whether one module can communicate with a sibling module, with a sub-module or even with the core\n* Sandbox has various caching strategies which will help to deal with asynchronous nature of AMD or ES6 modules\n<small>That way you really stop caring about order in which your modules are initialized, you can always cache events from one module and do lazy initialization when another module loads</small>\n* data, passed through Sandbox will become immutable, meaning that you can safely pass objects without fear that one of the modules can modify 'shared' state\n\n## [Lodash traverse](https://github.com/szarouski/lodash.dom-traverse)\nNative browser support allows you to traverse and select DOM using `'querySelector'`, `'insertAdjacentHTML'`, `'parent'`, and other API methods. But there are a few cases when it is not flexible/compatible enough and that is why jQuery is around. Lodash traverse is a tiny addon which provides a dozen of useful, chainable methods which in addition to native APIs give you minimalistic, yet ultimate control over your html. In combination with other [micro libraries](http://microjs.com/) you can assemble a highly customizable and slim in size library for your favorite projects.\n \n## [Simple permissions](https://github.com/szarouski/simple-permissions)\nNothing crazy, just a small library which allows you to add or remove multiple permissions for multiple targets. Crossbrowser and crossplatform with 100% coverage.\n","updated":"2018-10-08T15:45:22.328Z","path":"projects/index.html","comments":1,"layout":"page","_id":"cjnwmyod5000234cl81p2ixnd"},{"title":"Not found","date":"2015-02-05T01:27:42.000Z","overview":"We're sorry, the page was lost in space.","image":"image.v1.jpg","imageSmall":"imageSmall.jpg","sitemap":false,"_content":"We're sorry, the page you're looking for was lost in a space. Our mighty search agent will try to help you.","source":"not-found/index.md","raw":"title: Not found\ndate: 2015-02-04 20:27:42\noverview: We're sorry, the page was lost in space. \nimage: image.v1.jpg\nimageSmall: imageSmall.jpg\nsitemap: false\n---\nWe're sorry, the page you're looking for was lost in a space. Our mighty search agent will try to help you.","updated":"2015-03-18T12:38:35.936Z","path":"not-found/index.html","comments":1,"layout":"page","_id":"cjnwmyod8000334clei3y2ql8"},{"title":"Contact","layout":"contact","date":"2015-01-17T21:57:36.000Z","overview":"Send me a few lines to ask a personal question, get in touch or to share a thought with me","_content":"<iframe src=\"https://docs.google.com/forms/d/18KPF5kLhoLVebSuV3M4khpfddubrVdTXMIOI0MVkfyg/viewform?embedded=true\" width=\"100%\" height=\"1120\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\">Loading...</iframe>","source":"contact/index.md","raw":"title: Contact\nlayout: contact\ndate: 2015-01-17 16:57:36\noverview: Send me a few lines to ask a personal question, get in touch or to share a thought with me\n---\n<iframe src=\"https://docs.google.com/forms/d/18KPF5kLhoLVebSuV3M4khpfddubrVdTXMIOI0MVkfyg/viewform?embedded=true\" width=\"100%\" height=\"1120\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\">Loading...</iframe>","updated":"2015-03-08T03:12:29.209Z","path":"contact/index.html","comments":1,"_id":"cjnwmyodb000434cle2ws7p5g"},{"title":"About","layout":"about","date":"2015-01-17T21:57:36.000Z","image":"image.jpg?v=1","imageSmall":"imageSmall.jpg","copyright":"ESO/José Francisco Salgado","overview":"Learn about web technologies and more at Webuniverse","_content":"Web universe is a technical blog about technologies, tools, patterns, ideas and resources for web development. You can follow us on [twitter](https://twitter.com/webuniverseio), [facebook](https://www.facebook.com/webuniverseio), or add our [feed](/atom.xml) to your favorite reader.\n\n## The author\nSergey Zarouski is a web developer from Toronto, Canada. He has 9 years of superb experience in web applications development and optimization. He loves to work on complex and scalable web applications as well as on small, single page, interactive sites. Currently he is working at Indigo Books & Music Inc. where he is focused on bringing performance, accessibility & maintainability improvements.","source":"about/index.md","raw":"title: About\nlayout: about\ndate: 2015-01-17 16:57:36\nimage: image.jpg?v=1\nimageSmall: imageSmall.jpg\ncopyright: ESO/José Francisco Salgado\noverview: Learn about web technologies and more at Webuniverse\n---\nWeb universe is a technical blog about technologies, tools, patterns, ideas and resources for web development. You can follow us on [twitter](https://twitter.com/webuniverseio), [facebook](https://www.facebook.com/webuniverseio), or add our [feed](/atom.xml) to your favorite reader.\n\n## The author\nSergey Zarouski is a web developer from Toronto, Canada. He has 9 years of superb experience in web applications development and optimization. He loves to work on complex and scalable web applications as well as on small, single page, interactive sites. Currently he is working at Indigo Books & Music Inc. where he is focused on bringing performance, accessibility & maintainability improvements.","updated":"2018-10-08T15:44:56.721Z","path":"about/index.html","comments":1,"_id":"cjnwmyodd000534cl06easmpr"}],"Post":[{"title":"Javascript legacy code upgrade strategy","date":"2015-01-23T02:37:43.000Z","overview":"Learn how to make your existing web applications stable and fast by adapting scalable, modular javascript architecture.","_content":"I'm sure all of us seen very unoptimized websites, those, which are taking long time to render and sometimes slow down or even freeze when user preforms an action. Not that long ago I've had an opportunity to work on one of sites like that and in that article I'm going to save and share experience which I gained dealing with various edge cases. \n\n## Prologue\nWeb application consisted from main site and a few smaller web apps. Each of them had its own giant, minified javascript file located near the head section and bunch of script tags with function calls all over the page. Code base included a few hundreds of files with total size of ~6 megabytes. There were a couple of factors which made it extremely hard to maintain such a giant code base: \n* there were no strict rules - developers could easily access global scope from anywhere\n* code was dependant on the order in which files were concatenated\n* that was leading to situations where fix or new feature for one case lead to a bug in another case\n* to fix or implement things properly we had to rewrite sections of code, but when there are no clear dependencies it was taking huge effort to do that (not to mention dependencies of dependencies and so on...)\n* to make things work some developers were copying all of the dependencies from one place to another instead of decoupling only required functional\n* there were no code validation tools\n* we had to keep track of what inline scripts were doing and which conditions in the back-end logic caused them to show\n\n## The Story\n\n## Epilogue","source":"_drafts/javascript-legacy-code-upgrade-strategy.md","raw":"title: Javascript legacy code upgrade strategy\ndate: 2015-01-22 21:37:43\ntags:\noverview: Learn how to make your existing web applications stable and fast by adapting scalable, modular javascript architecture.    \n---\nI'm sure all of us seen very unoptimized websites, those, which are taking long time to render and sometimes slow down or even freeze when user preforms an action. Not that long ago I've had an opportunity to work on one of sites like that and in that article I'm going to save and share experience which I gained dealing with various edge cases. \n\n## Prologue\nWeb application consisted from main site and a few smaller web apps. Each of them had its own giant, minified javascript file located near the head section and bunch of script tags with function calls all over the page. Code base included a few hundreds of files with total size of ~6 megabytes. There were a couple of factors which made it extremely hard to maintain such a giant code base: \n* there were no strict rules - developers could easily access global scope from anywhere\n* code was dependant on the order in which files were concatenated\n* that was leading to situations where fix or new feature for one case lead to a bug in another case\n* to fix or implement things properly we had to rewrite sections of code, but when there are no clear dependencies it was taking huge effort to do that (not to mention dependencies of dependencies and so on...)\n* to make things work some developers were copying all of the dependencies from one place to another instead of decoupling only required functional\n* there were no code validation tools\n* we had to keep track of what inline scripts were doing and which conditions in the back-end logic caused them to show\n\n## The Story\n\n## Epilogue","slug":"javascript-legacy-code-upgrade-strategy","published":0,"updated":"2015-10-25T18:15:17.692Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnwmyocv000034clr4nfajos"},{"title":"Manage project dependencies with simple-installer","date":"2015-04-05T14:52:22.000Z","overview":"Download and/or install programs in similar manner to chocolatey or similar installation managers.","image":"image.png","imageSmall":"imageSmall.png","_content":"In this article you're going to learn about a program installation manager similar to [chocolatey](https://chocolatey.org/) or `apt-get`, which is running on node.js. It is called [`SimpleInstaller`](https://github.com/szarouski/SimpleInstaller) and it can also work as a downloader and a task runner. We're going to look at a few simple usage examples and then we're going to see how SimpleInstaller can be integrated into project setup workflow, to bring new members of the team up to speed. \n\n## Top level highlights\n\n- is crossplatform (tested on windows and debian)\n- downloads files (optional) and runs commands\n- skips already installed programs\n- could be used as a simple task runner\n- could work as a downloader\n- simple and because of that flexible and extendable [api](https://github.com/szarouski/SimpleInstaller#api)\n- tested with 100% coverage\n- uses harmony mode for generators and `npm co` to manage execution flow\n\n## Example: Installing git on Debian\n\nLets take a look at how it can be used to install a program. Here it installs git via `apt-get` on debian:\n```js\nvar co = require('co');\nvar SimpleInstaller = require('simple-installer');\n\nco(function* () {\n    yield new SimpleInstaller({\n        prefix: 'apt-get install ',\n        name: 'git'\n    }).run();\n});\n```\nSince SimpleInstaller is using generators, it is [recommended](/asynchronous-programming-with-ES6-generators-promises-and-npm-co/) to use npm modules like `co` to keep asynchronous code in a synchronous / maintainable manner.\n\n## Example: Installing ruby on Windows\n\nThis example downloads ruby and installs it on Windows:\n```js\nvar co = require('co');\nvar SimpleInstaller = require('simple-installer');\n\nco(function* () {\n    var installer = new SimpleInstaller({\n        link: 'https://dl.bintray.com/oneclick/rubyinstaller/rubyinstaller-2.2.1-x64.exe?direct',\n        name: 'ruby',\n        postfix: ' /verysilent /dir=\"c:\\\\Ruby2\" /tasks=\"assocfiles,modpath\"'\n    });\n    yield installer.run();\n});\n```\nFortunately rubyinstaller has command line interface which supports `/verysilent` mode - which allows us to install a program without a single popup.\n\n## Example: Batch installation\n\n<div style=\"text-align: center;margin-top: 1em;\">[![Installation process](simple-installer.gif)](simple-installer.gif)</div>\n\nWhen we setup a new machine for a new team member, or when we start on a project developed by another company, we need to install all dependencies which are required for project to build and run. Those could be node modules, ruby gems, git repositories, bower components, etc... Lets take a look at how we could use SimpleInstaller to make project dependencies installation as simple as possible.\n\nFirst we're going to create a module `config.js`, which exports an array of program `info` objects, which are required to build and run our project:\n```js\n'use strict';\n\nvar path = require('path');\n\nmodule.exports = [{\n    link: 'https://dl.bintray.com/oneclick/rubyinstaller/rubyinstaller-2.2.1-x64.exe?direct',\n    name: 'ruby',\n    postfix: ' /verysilent /dir=\"c:\\\\Ruby2\" /tasks=\"assocfiles,modpath\"'\n},\n{\n    link: 'http://github.com/msysgit/msysgit/releases/download/' +\n    'Git-1.9.4-preview20140929/Git-1.9.4-preview20140929.exe',\n    name: 'git.exe',\n    postfix: ' /DIR=\"c:\\\\Git\" /VERYSILENT /NORESTART /NOCANCEL /SP- /CLOSEAPPLICATIONS /RESTARTAPPLICATIONS /NOICONS ' +\n    '/COMPONENTS=\"icons,ext\\\\reg\\\\shellhere,assoc,assoc_sh\" /LOADINF=\"' + path.resolve(__dirname, 'git.inf') + '\"'\n}, {\n    prefix: 'npm i ',\n    name: 'karma',\n    postfix: '-cli -g'\n}, {\n    prefix: 'npm i ',\n    name: 'grunt',\n    postfix: '-cli -g'\n}, {\n    prefix: 'npm i ',\n    name: 'bower',\n    postfix: ' -g'\n}, {\n    prefix: 'SET PATH=%PATH%;c:\\\\Ruby2\\\\bin&&gem install ',\n    name: 'compass',\n    postfix: ' -v 1.0.1'\n}, {\n    prefix: 'echo ',\n    name: 'bower_components',\n    postfix: '&&SET PATH=%PATH%;c:\\\\Git\\\\bin\\\\&&bower install'\n}];\n```\nHere we can see that project requires a few global node packages, along with git, ruby and compass gem. As a final step it also runs `bower install` to install client side dependencies.\n\nNext we need to create a module `installer.js` which will contain installation logic:\n```js\n'use strict';\n\nvar co = require('co'); //use co and lodash to simplify code\nvar _ = require('lodash');\nvar SimpleInstaller = require('simple-installer');\nvar config = require('./config'); //our config\n\nco(function* runCoroutine() {\n    //first we convert array of objects to array of generators\n    var setup = _.map(config, function* runInstaller(info) {\n        var installer = new SimpleInstaller(info);\n        yield installer.run();\n    });\n\n    //then iterate and run installers, one at a time\n    for (var i = 0, length = setup.length; i < length; i++) {\n        yield setup[i];\n    }\n\n    console.log('Installation finished'.yellow);\n}).catch(function (ex) {\n    setTimeout(function throwUnhandledException() {\n        console.log('setup failed'.red);\n        console.log((ex.message ? ex.message : ex).red);\n        throw ex;\n    }, 0);\n});\n```\n\nAnd finally we need to find a good place to run installer.js. I like using it in package.json postinstall script:\n```js\n{\n  \"scripts\": {\n    \"preinstall\": \"npm cache clean\",\n    \"postinstall\": \"node --harmony installer.js&&npm shrinkwrap --dev\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  }\n}\n```\nThat way, after `npm install`, once we get all node_modules, we can run our installer, which in turn will install all missing dependencies.","source":"_posts/manage-project-dependencies-with-simple-installer.md","raw":"title: \"Manage project dependencies with simple-installer\"\ndate: 2015-04-05 10:52:22\ntags:\noverview: Download and/or install programs in similar manner to chocolatey or similar installation managers.\nimage: image.png\nimageSmall: imageSmall.png\n---\nIn this article you're going to learn about a program installation manager similar to [chocolatey](https://chocolatey.org/) or `apt-get`, which is running on node.js. It is called [`SimpleInstaller`](https://github.com/szarouski/SimpleInstaller) and it can also work as a downloader and a task runner. We're going to look at a few simple usage examples and then we're going to see how SimpleInstaller can be integrated into project setup workflow, to bring new members of the team up to speed. \n\n## Top level highlights\n\n- is crossplatform (tested on windows and debian)\n- downloads files (optional) and runs commands\n- skips already installed programs\n- could be used as a simple task runner\n- could work as a downloader\n- simple and because of that flexible and extendable [api](https://github.com/szarouski/SimpleInstaller#api)\n- tested with 100% coverage\n- uses harmony mode for generators and `npm co` to manage execution flow\n\n## Example: Installing git on Debian\n\nLets take a look at how it can be used to install a program. Here it installs git via `apt-get` on debian:\n```js\nvar co = require('co');\nvar SimpleInstaller = require('simple-installer');\n\nco(function* () {\n    yield new SimpleInstaller({\n        prefix: 'apt-get install ',\n        name: 'git'\n    }).run();\n});\n```\nSince SimpleInstaller is using generators, it is [recommended](/asynchronous-programming-with-ES6-generators-promises-and-npm-co/) to use npm modules like `co` to keep asynchronous code in a synchronous / maintainable manner.\n\n## Example: Installing ruby on Windows\n\nThis example downloads ruby and installs it on Windows:\n```js\nvar co = require('co');\nvar SimpleInstaller = require('simple-installer');\n\nco(function* () {\n    var installer = new SimpleInstaller({\n        link: 'https://dl.bintray.com/oneclick/rubyinstaller/rubyinstaller-2.2.1-x64.exe?direct',\n        name: 'ruby',\n        postfix: ' /verysilent /dir=\"c:\\\\Ruby2\" /tasks=\"assocfiles,modpath\"'\n    });\n    yield installer.run();\n});\n```\nFortunately rubyinstaller has command line interface which supports `/verysilent` mode - which allows us to install a program without a single popup.\n\n## Example: Batch installation\n\n<div style=\"text-align: center;margin-top: 1em;\">[![Installation process](simple-installer.gif)](simple-installer.gif)</div>\n\nWhen we setup a new machine for a new team member, or when we start on a project developed by another company, we need to install all dependencies which are required for project to build and run. Those could be node modules, ruby gems, git repositories, bower components, etc... Lets take a look at how we could use SimpleInstaller to make project dependencies installation as simple as possible.\n\nFirst we're going to create a module `config.js`, which exports an array of program `info` objects, which are required to build and run our project:\n```js\n'use strict';\n\nvar path = require('path');\n\nmodule.exports = [{\n    link: 'https://dl.bintray.com/oneclick/rubyinstaller/rubyinstaller-2.2.1-x64.exe?direct',\n    name: 'ruby',\n    postfix: ' /verysilent /dir=\"c:\\\\Ruby2\" /tasks=\"assocfiles,modpath\"'\n},\n{\n    link: 'http://github.com/msysgit/msysgit/releases/download/' +\n    'Git-1.9.4-preview20140929/Git-1.9.4-preview20140929.exe',\n    name: 'git.exe',\n    postfix: ' /DIR=\"c:\\\\Git\" /VERYSILENT /NORESTART /NOCANCEL /SP- /CLOSEAPPLICATIONS /RESTARTAPPLICATIONS /NOICONS ' +\n    '/COMPONENTS=\"icons,ext\\\\reg\\\\shellhere,assoc,assoc_sh\" /LOADINF=\"' + path.resolve(__dirname, 'git.inf') + '\"'\n}, {\n    prefix: 'npm i ',\n    name: 'karma',\n    postfix: '-cli -g'\n}, {\n    prefix: 'npm i ',\n    name: 'grunt',\n    postfix: '-cli -g'\n}, {\n    prefix: 'npm i ',\n    name: 'bower',\n    postfix: ' -g'\n}, {\n    prefix: 'SET PATH=%PATH%;c:\\\\Ruby2\\\\bin&&gem install ',\n    name: 'compass',\n    postfix: ' -v 1.0.1'\n}, {\n    prefix: 'echo ',\n    name: 'bower_components',\n    postfix: '&&SET PATH=%PATH%;c:\\\\Git\\\\bin\\\\&&bower install'\n}];\n```\nHere we can see that project requires a few global node packages, along with git, ruby and compass gem. As a final step it also runs `bower install` to install client side dependencies.\n\nNext we need to create a module `installer.js` which will contain installation logic:\n```js\n'use strict';\n\nvar co = require('co'); //use co and lodash to simplify code\nvar _ = require('lodash');\nvar SimpleInstaller = require('simple-installer');\nvar config = require('./config'); //our config\n\nco(function* runCoroutine() {\n    //first we convert array of objects to array of generators\n    var setup = _.map(config, function* runInstaller(info) {\n        var installer = new SimpleInstaller(info);\n        yield installer.run();\n    });\n\n    //then iterate and run installers, one at a time\n    for (var i = 0, length = setup.length; i < length; i++) {\n        yield setup[i];\n    }\n\n    console.log('Installation finished'.yellow);\n}).catch(function (ex) {\n    setTimeout(function throwUnhandledException() {\n        console.log('setup failed'.red);\n        console.log((ex.message ? ex.message : ex).red);\n        throw ex;\n    }, 0);\n});\n```\n\nAnd finally we need to find a good place to run installer.js. I like using it in package.json postinstall script:\n```js\n{\n  \"scripts\": {\n    \"preinstall\": \"npm cache clean\",\n    \"postinstall\": \"node --harmony installer.js&&npm shrinkwrap --dev\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  }\n}\n```\nThat way, after `npm install`, once we get all node_modules, we can run our installer, which in turn will install all missing dependencies.","slug":"manage-project-dependencies-with-simple-installer","published":1,"updated":"2015-10-25T18:15:39.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnwmyodf000634cly5q62ln9"},{"title":"Cyclomatic complexity refactoring tips for javascript developers","date":"2015-10-23T04:00:00.000Z","overview":"Learn how to make your code much easier for reading and writing through management of cyclomatic complexity","image":"image.jpg","imageSmall":"imageSmall.jpg","_content":"This article briefly explains what is cyclomatic complexity and gives practical tips about how to make your projects maintainable.\n## Cyclomatic complexity\nIn short cyclomatic complexity is a number which indicates how many execution scenarios there might be inside your code. Everyday developers read lots of code and during this process they try to imagine what the code is doing. The more execution scenarios they see in the code, the harder it is to keep track of what is going on. That leads to misunderstanding and therefore to hacks and buggy implementations. Conditional operators increase cyclomatic complexity, so it is a matter of keeping them under control. Following operators will increase cyclomatic complexity in javascript:\n```\nif | while | for | case | || | catch | ternary operator ?:\n```\nBelow is an example of how you don't want your code to look as it will be too complex to understand:\n```js\nif (condition) {\n  if (condition) {\n    while (condition ? expression : expression) {\n      if (condition || condition && condition) {\n      }\n    } \n  }\n  //... a few more conditions like this and there is a 100% chance that we'll need a debugger today\n}\n```\n\n## Functions as a way to reduce complexity\nWe break down code into functions not only to make sure that we don't repeat ourselves, but also to define a scoped scenario which we can understand more easily. If code inside function was written without side effects (does only one thing and exactly what it says it does - that is what we're expecting from APIs which does not belong to us, right? :)), it is enough for us take a look at function's name to get the idea about what it is doing.\n```js\nfunction run() {\n  if (!isInstalled()) {\n    chooseInstallProcess();\n  }\n}\nfunction isInstalled() {}\nfunction chooseInstallProcess() {\n  if (shouldSkipDownload()) {\n    installProgram();\n  } else {\n    downloadAndInstall();\n  }\n}\nfunction shouldSkipDownload() {}\nfunction downloadAndInstall() {\n  downloadProgram();\n  installProgram();\n}\nfunction downloadProgram() {}\nfunction installProgram() {}\n```\nIt is much easier to read code which is broken into smaller functions, isn't it? Small functions alone will improve readability of your code and make whole app much more stable and maintainable. **When we split code into functions we split cyclomatic complexity.**\n\n## Tools\nCode analysis tools like [eslint](http://eslint.org/docs/rules/complexity.html) or [jshint](http://jshint.com/docs/options/#maxcomplexity) will help you to find the value of cyclomatic complexity per each function. All you need to do is to define a max value after which they'll start logging errors. My personal preference for max complexity is 3 as it will guarantee that my functions will be small. Code below will fail complexity check:\n```js\nfunction getName(firstName, lastName) {\n  //cyclomatic complexity always starts from 1\n  if (firstName && lastName) { //if operator, +1\n    return firstName + ' ' + lastName;\n  } else if (firstName) { // +1\n    return firstName;\n  } else if (lastName) { // +1\n    return lastName;\n  } else if (!firstName && !lastName) { // +1\n    return 'stranger';\n  }\n  //total complexity is 5\n}\n```\n\nAnd following code will pass:\n```js\nfunction getNameOrFallback(name, fallback) {\n  //complexity starts from 1\n  return name || fallback; //|| operator, +1\n  //total complexity is 2\n}\n\nfunction getName(firstName, lastName) {\n  //complexity starts from 1\n  let name = '';\n  if (firstName) { //if operator, +1\n    name = firstName;\n  }\n  if (lastName) { // +1\n    name += ' ' + lastName;\n  }\n  //even though complexity for getNameOrFallback is 2, it doesn't add up to complexity of current function\n  return getNameOrFallback(name.trim(), 'stranger');\n  //total complexity is 3\n}\n```\n\nWhen max complexity is set to 3 we can use at least two `if` operators, which is more than enough per function. Every time, when you run into situation, where you need complexity to be more than 3 - you need to refactor, move part of the logic into a separate function or both.\n\n## Refactoring tips\nThere are a few scenarios where you might be tempted to disable or increase max-complexity. It is always a bad decision, so let me show you a few examples and how code can be refactored to meet your standards.\n\n### Refactoring a switch-like logic\nFollowing example can be arbitrary complex:\n```js\nfunction getMarkupForError(error) {\n  switch (error) {\n  case 'validation-error':\n    //...\n    break;\n  case 'network-error':\n    //...\n    break;\n  case 'server-error':\n    //...\n    break;\n  //... more cases\n  default:\n    //...handle unknown error\n    break;\n  }\n  //arbitrary complex\n}\n```\n\nThe same example also can be re-written with if/if-else/else operators:\n```js\nfunction getMarkupForError(error) {\n  if (error === 'validation-error') {/*...*/}\n  else if (error === 'network-error') {/*...*/}\n  else if (error === 'server-error') {/*...*/}\n  //...more conditions\n  else {/*...handle unknown error*/}\n  //arbitrary complex\n}\n```\n\nIn order to reduce complexity here you simply need to create a map object:\n```js\nfunction getMarkupForError(error) {\n  let errorTypeToMarkupMap = {\n    'validation-error': function () {/*...*/},\n    'network-error': function () {/*...*/},\n    'server-error': function () {/*...*/}\n  };\n  if (errorTypeToMarkupMap.hasOwnProperty(error)) {\n    return errorTypeToMarkupMap[error];\n  }\n  /*...handle unknown error*/\n  //total complexity of this function will be 2\n}\n```\n\n### Refactoring logic which follows a pattern\nFollowing example is a bit more complex so we can't use switch:\n```js\nfunction highlightCurrentSection($t) {\n  $t.find('.menu__item').removeClass('active');\n  let pathname = window.location.pathname;\n  if (/\\/(books|livres)/i.test(pathname)) {\n    $t.find('.menu__books').addClass('active');\n  }\n  else if (/\\/(baby|bebe)/i.test(pathname)) {\n    $t.find('.menu__baby').addClass('active');\n  }\n  else if (/\\/(house-and-home|maison)/i.test(pathname)) {\n    $t.find('.menu__houseandhome').addClass('active');\n  }\n  //...more conditions\n  else if (/\\/giftcards/i.test(pathname)) {\n    $t.find('.menu__giftcards').addClass('active');\n  }\n  //arbitrary complex\n}\n```\n\nWe can see that branches are following a pattern - we check that regex is matching current location and add an `active` class to specified selector. The same code can be simplified if we create an array of objects, which contain a pattern and a selector and loop through it:\n```js\nfunction highlightCurrentSection($t) {\n  $t.find('.menu__item').removeClass('active');\n\n  let menuItems = [\n    {pattern: /\\/(books|livres)/i, className: '.menu__books'},\n    {pattern: /\\/(baby|bebe)/i, className: '.menu__baby'},\n    {pattern: /\\/(house-and-home|maison)/i, className: '.menu__houseandhome'},\n    {pattern: /\\/giftcards/i, className: '.menu__giftcards'}\n  ];\n  let hasMatch = false;\n  let pathname = window.location.pathname;\n  _.each(menuItems, function addClassIfNeeded(params) {\n    if(!hasMatch && params.pattern.test(pathname)) {\n      $t.find(params.className).addClass('active');\n      hasMatch = true;\n    }\n    //total complexity of addClassIfNeeded is 2\n  });\n  //total complexity of highlightCurrentSection function is 1\n}\n```\n\n### Refactoring logic where branches have similar purpose\nIn following example we can see that branches inside lookupModule have the same purpose, but code inside conditions and inside branches doesn't follow a pattern:\n```js\nfunction lookupModule(id) {\n  let sharedPathsConfig = require('../sharedPathsConfig');\n  let overWritesForServer = 'events';\n  let map = {react: 'react/addons', jquery: overWritesForServer};\n  if (/^\\$.+/.test(id)) {\n    return overWritesForServer;\n  }\n  if (map[id]) {\n    return map[id];\n  }\n  if (id in sharedPathsConfig.paths) {\n    return path.join(process.cwd(), sharedPathsConfig.paths[id]);\n  }\n  //...more conditions\n  return id;\n  //total complexity of lookupModule is arbitrary\n}\n```\n\nOn order to refactor this we can create an array of objects which contain a callback for condition and a callback for logic and iterate over it:\n```js\nfunction lookupModule(id) {\n  let sharedPathsConfig = require('../sharedPathsConfig');\n  let overWritesForServer = 'events';\n  let map = {react: 'react/addons', jquery: overWritesForServer};\n  let lookupActions = [\n    {\n      condition: function() {return /^\\$.+/.test(id);},\n      result: function() {return overWritesForServer;}\n    },\n    {\n      condition: function() {return map[id];},\n      result: function() {return map[id];}\n    },\n    {\n      condition: function() {return id in sharedPathsConfig.paths;},\n      result: function() {return path.join(process.cwd(), sharedPathsConfig.paths[id]);}\n    },\n    //...more conditions\n    {\n      condition: function() {return true;},\n      result: function() {return id;}\n    }\n  ];\n  //Symbol.iterator is used here for simplicity, you can use a polyfill function `makeIterator` from\n  //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\n  let actionsIterator = lookupActions[Symbol.iterator]();\n  let result;\n  while (!result) {\n    let action = actionsIterator.next().value;\n    if (action.condition()) {\n      result = action.result();\n    }\n  }\n  return result;\n  //total complexity of lookupModule function is 3\n}\n```\n\n## Final thoughts\nCyclomatic complexity defines how many use cases we should keep in mind (and how many tests we need to create) while working with a program. It is important to keep cyclomatic complexity under control and as we could see with a little practice we can keep it low quite easily.\n\nI hope you liked this article. Please share your thoughts an tips in comments.\n\n\n## Links\n[Cyclomatic complexity](https://en.wikipedia.org/wiki/Cyclomatic_complexity) - Wikipedia\n[eslint integrations](http://eslint.org/docs/user-guide/integrations) with editors and build tools\n[jshint integrations](http://jshint.com/install/) with editors and build tools\n\n<style>\n.article__title {font-size: 32px;}\n@media (max-width: 540px) {\n    .article__title {font-size: 25px;}\n}\n</style>","source":"_posts/cyclomatic-complexity-refactoring-tips.md","raw":"title: Cyclomatic complexity refactoring tips for javascript developers\ndate: 2015-10-23 00:00:00\ntags:\noverview: Learn how to make your code much easier for reading and writing through management of cyclomatic complexity\nimage: image.jpg\nimageSmall: imageSmall.jpg\n---\nThis article briefly explains what is cyclomatic complexity and gives practical tips about how to make your projects maintainable.\n## Cyclomatic complexity\nIn short cyclomatic complexity is a number which indicates how many execution scenarios there might be inside your code. Everyday developers read lots of code and during this process they try to imagine what the code is doing. The more execution scenarios they see in the code, the harder it is to keep track of what is going on. That leads to misunderstanding and therefore to hacks and buggy implementations. Conditional operators increase cyclomatic complexity, so it is a matter of keeping them under control. Following operators will increase cyclomatic complexity in javascript:\n```\nif | while | for | case | || | catch | ternary operator ?:\n```\nBelow is an example of how you don't want your code to look as it will be too complex to understand:\n```js\nif (condition) {\n  if (condition) {\n    while (condition ? expression : expression) {\n      if (condition || condition && condition) {\n      }\n    } \n  }\n  //... a few more conditions like this and there is a 100% chance that we'll need a debugger today\n}\n```\n\n## Functions as a way to reduce complexity\nWe break down code into functions not only to make sure that we don't repeat ourselves, but also to define a scoped scenario which we can understand more easily. If code inside function was written without side effects (does only one thing and exactly what it says it does - that is what we're expecting from APIs which does not belong to us, right? :)), it is enough for us take a look at function's name to get the idea about what it is doing.\n```js\nfunction run() {\n  if (!isInstalled()) {\n    chooseInstallProcess();\n  }\n}\nfunction isInstalled() {}\nfunction chooseInstallProcess() {\n  if (shouldSkipDownload()) {\n    installProgram();\n  } else {\n    downloadAndInstall();\n  }\n}\nfunction shouldSkipDownload() {}\nfunction downloadAndInstall() {\n  downloadProgram();\n  installProgram();\n}\nfunction downloadProgram() {}\nfunction installProgram() {}\n```\nIt is much easier to read code which is broken into smaller functions, isn't it? Small functions alone will improve readability of your code and make whole app much more stable and maintainable. **When we split code into functions we split cyclomatic complexity.**\n\n## Tools\nCode analysis tools like [eslint](http://eslint.org/docs/rules/complexity.html) or [jshint](http://jshint.com/docs/options/#maxcomplexity) will help you to find the value of cyclomatic complexity per each function. All you need to do is to define a max value after which they'll start logging errors. My personal preference for max complexity is 3 as it will guarantee that my functions will be small. Code below will fail complexity check:\n```js\nfunction getName(firstName, lastName) {\n  //cyclomatic complexity always starts from 1\n  if (firstName && lastName) { //if operator, +1\n    return firstName + ' ' + lastName;\n  } else if (firstName) { // +1\n    return firstName;\n  } else if (lastName) { // +1\n    return lastName;\n  } else if (!firstName && !lastName) { // +1\n    return 'stranger';\n  }\n  //total complexity is 5\n}\n```\n\nAnd following code will pass:\n```js\nfunction getNameOrFallback(name, fallback) {\n  //complexity starts from 1\n  return name || fallback; //|| operator, +1\n  //total complexity is 2\n}\n\nfunction getName(firstName, lastName) {\n  //complexity starts from 1\n  let name = '';\n  if (firstName) { //if operator, +1\n    name = firstName;\n  }\n  if (lastName) { // +1\n    name += ' ' + lastName;\n  }\n  //even though complexity for getNameOrFallback is 2, it doesn't add up to complexity of current function\n  return getNameOrFallback(name.trim(), 'stranger');\n  //total complexity is 3\n}\n```\n\nWhen max complexity is set to 3 we can use at least two `if` operators, which is more than enough per function. Every time, when you run into situation, where you need complexity to be more than 3 - you need to refactor, move part of the logic into a separate function or both.\n\n## Refactoring tips\nThere are a few scenarios where you might be tempted to disable or increase max-complexity. It is always a bad decision, so let me show you a few examples and how code can be refactored to meet your standards.\n\n### Refactoring a switch-like logic\nFollowing example can be arbitrary complex:\n```js\nfunction getMarkupForError(error) {\n  switch (error) {\n  case 'validation-error':\n    //...\n    break;\n  case 'network-error':\n    //...\n    break;\n  case 'server-error':\n    //...\n    break;\n  //... more cases\n  default:\n    //...handle unknown error\n    break;\n  }\n  //arbitrary complex\n}\n```\n\nThe same example also can be re-written with if/if-else/else operators:\n```js\nfunction getMarkupForError(error) {\n  if (error === 'validation-error') {/*...*/}\n  else if (error === 'network-error') {/*...*/}\n  else if (error === 'server-error') {/*...*/}\n  //...more conditions\n  else {/*...handle unknown error*/}\n  //arbitrary complex\n}\n```\n\nIn order to reduce complexity here you simply need to create a map object:\n```js\nfunction getMarkupForError(error) {\n  let errorTypeToMarkupMap = {\n    'validation-error': function () {/*...*/},\n    'network-error': function () {/*...*/},\n    'server-error': function () {/*...*/}\n  };\n  if (errorTypeToMarkupMap.hasOwnProperty(error)) {\n    return errorTypeToMarkupMap[error];\n  }\n  /*...handle unknown error*/\n  //total complexity of this function will be 2\n}\n```\n\n### Refactoring logic which follows a pattern\nFollowing example is a bit more complex so we can't use switch:\n```js\nfunction highlightCurrentSection($t) {\n  $t.find('.menu__item').removeClass('active');\n  let pathname = window.location.pathname;\n  if (/\\/(books|livres)/i.test(pathname)) {\n    $t.find('.menu__books').addClass('active');\n  }\n  else if (/\\/(baby|bebe)/i.test(pathname)) {\n    $t.find('.menu__baby').addClass('active');\n  }\n  else if (/\\/(house-and-home|maison)/i.test(pathname)) {\n    $t.find('.menu__houseandhome').addClass('active');\n  }\n  //...more conditions\n  else if (/\\/giftcards/i.test(pathname)) {\n    $t.find('.menu__giftcards').addClass('active');\n  }\n  //arbitrary complex\n}\n```\n\nWe can see that branches are following a pattern - we check that regex is matching current location and add an `active` class to specified selector. The same code can be simplified if we create an array of objects, which contain a pattern and a selector and loop through it:\n```js\nfunction highlightCurrentSection($t) {\n  $t.find('.menu__item').removeClass('active');\n\n  let menuItems = [\n    {pattern: /\\/(books|livres)/i, className: '.menu__books'},\n    {pattern: /\\/(baby|bebe)/i, className: '.menu__baby'},\n    {pattern: /\\/(house-and-home|maison)/i, className: '.menu__houseandhome'},\n    {pattern: /\\/giftcards/i, className: '.menu__giftcards'}\n  ];\n  let hasMatch = false;\n  let pathname = window.location.pathname;\n  _.each(menuItems, function addClassIfNeeded(params) {\n    if(!hasMatch && params.pattern.test(pathname)) {\n      $t.find(params.className).addClass('active');\n      hasMatch = true;\n    }\n    //total complexity of addClassIfNeeded is 2\n  });\n  //total complexity of highlightCurrentSection function is 1\n}\n```\n\n### Refactoring logic where branches have similar purpose\nIn following example we can see that branches inside lookupModule have the same purpose, but code inside conditions and inside branches doesn't follow a pattern:\n```js\nfunction lookupModule(id) {\n  let sharedPathsConfig = require('../sharedPathsConfig');\n  let overWritesForServer = 'events';\n  let map = {react: 'react/addons', jquery: overWritesForServer};\n  if (/^\\$.+/.test(id)) {\n    return overWritesForServer;\n  }\n  if (map[id]) {\n    return map[id];\n  }\n  if (id in sharedPathsConfig.paths) {\n    return path.join(process.cwd(), sharedPathsConfig.paths[id]);\n  }\n  //...more conditions\n  return id;\n  //total complexity of lookupModule is arbitrary\n}\n```\n\nOn order to refactor this we can create an array of objects which contain a callback for condition and a callback for logic and iterate over it:\n```js\nfunction lookupModule(id) {\n  let sharedPathsConfig = require('../sharedPathsConfig');\n  let overWritesForServer = 'events';\n  let map = {react: 'react/addons', jquery: overWritesForServer};\n  let lookupActions = [\n    {\n      condition: function() {return /^\\$.+/.test(id);},\n      result: function() {return overWritesForServer;}\n    },\n    {\n      condition: function() {return map[id];},\n      result: function() {return map[id];}\n    },\n    {\n      condition: function() {return id in sharedPathsConfig.paths;},\n      result: function() {return path.join(process.cwd(), sharedPathsConfig.paths[id]);}\n    },\n    //...more conditions\n    {\n      condition: function() {return true;},\n      result: function() {return id;}\n    }\n  ];\n  //Symbol.iterator is used here for simplicity, you can use a polyfill function `makeIterator` from\n  //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\n  let actionsIterator = lookupActions[Symbol.iterator]();\n  let result;\n  while (!result) {\n    let action = actionsIterator.next().value;\n    if (action.condition()) {\n      result = action.result();\n    }\n  }\n  return result;\n  //total complexity of lookupModule function is 3\n}\n```\n\n## Final thoughts\nCyclomatic complexity defines how many use cases we should keep in mind (and how many tests we need to create) while working with a program. It is important to keep cyclomatic complexity under control and as we could see with a little practice we can keep it low quite easily.\n\nI hope you liked this article. Please share your thoughts an tips in comments.\n\n\n## Links\n[Cyclomatic complexity](https://en.wikipedia.org/wiki/Cyclomatic_complexity) - Wikipedia\n[eslint integrations](http://eslint.org/docs/user-guide/integrations) with editors and build tools\n[jshint integrations](http://jshint.com/install/) with editors and build tools\n\n<style>\n.article__title {font-size: 32px;}\n@media (max-width: 540px) {\n    .article__title {font-size: 25px;}\n}\n</style>","slug":"cyclomatic-complexity-refactoring-tips","published":1,"updated":"2015-10-25T18:29:18.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnwmyodt000734clgfs5qrhk"},{"title":"CSS organization, naming conventions and safe extend without preprocessors","date":"2015-03-14T18:37:31.000Z","overview":"Opinion about how to organize clean and maintainable CSS structure, note about naming conventions, and how one can extend selectors without preprocessors","image":"image.jpg","imageSmall":"imageSmall.jpg","_content":"Maintainability of CSS project highly depends on developer's choices, on how a project was originally planned. Due to CSS cascading nature, it is easy to end up in a situation when you try to fix or add one thing, which breaks something else. In worst case scenario the issue will remain unnoticed and end up going to production. It is especially hard to work on poorly organized css in a large team (a case where large team has access to CSS files is [not too common](https://css-tricks.com/poll-wrapup-the-number-of-people-touching-css/), but is still valid).\n\n## BEM (or better GRM)\nGood news is that there are battle tested tools and approaches which help to keep things under control. One of them is the famous [BEM](https://en.bem.info/). Lets take a look at the following example:\n```html\n<div class=\"shopping-cart-item\">\n  <div class=\"content special-offer\">\n    <h2 class=\"title\">Title</h2>\n  </div>\n</div>\n```\n\nIf at some point you'll need to remove whole `.content` block from CSS which has nested `.title`, you'll need to check if `.special-offer` or even `.shopping-cart-item` (and other ancestors) also have a nested `.title`.\n\nNow lets take a look at one of the ways to write the same with BEM:\n```html\n<div class=\"container container--shopping-cart\">\n  <div class=\"container__content container__content--special-offer\">\n    <h2 class=\"container__title\">Title</h2>\n  </div>\n</div>\n```\n\nBy looking at this, we immediately know the relationship of each of the elements and can safely do clean up, if we need to remove some styles. BEM is an abbreviation for Block, Element, Modifier and in the example above we can tell that `container` is a Block, `content` and `title` are Elements, `shopping-cart` and `special-offer` are Modifiers. While approach is great, it sounds a bit weird to call `container` a Block and `content` an Element. When someone mentions BEM as an approach for selectors naming, I like to translate it to **GRM** - Group, Role, Modifier. Lets read it again: `container` is a Group, `content` and `title` define Roles within a Group, `shopping-cart` and `special-offer` are Modifiers.\n\n## To extend or not to extend?\nThough there is something that is not nice in the example above. Having duplicated classes feels redundant. Lets see what we can do about it. For html example above styles typically look similar to following:\n```css\n.container {\n  border: 1px solid grey;\n  padding: 10px;\n  font-family: Arial, sans-serif;\n}\n  .container--shopping-cart {\n    border: 4px solid orange;\n    background-color: #eee;\n  }\n```\nIf one use preprocessors we could illuminate a need for duplicated classes using extends. Here is how you can use it with SCSS:\n```scss\n.container {\n  border: 1px solid grey;\n  padding: 10px;\n  font-family: Arial, sans-serif;\n}\n  .container--shopping-cart {\n    @extend .container;\n    border: 4px solid orange;\n    background-color: #eee;\n  }\n```\nHere is a generated result:\n```css\n.container, .container--shopping-cart {\n  border: 1px solid grey;\n  padding: 10px;\n  font-family: Arial, sans-serif;\n}\n  .container--shopping-cart {\n    border: 4px solid orange;\n    background-color: #eee;\n  }\n```\nLooks nice, now we can use both `.container` and `.container--shopping-cart` independently and CSS result still looks good. However `@extend` should be used carefully, as it might significantly increase the size of your CSS file or [jumble specificity](http://csswizardry.com/2014/11/when-to-use-extend-when-to-use-a-mixin/).\n \nSo what can we do here to take advantage of behaviour which `@extend` gives us, but without any risk? Here is a pure CSS solution:\n```scss\n.container, [class^=\"container--\"], [class*=\" container--\"] {\n  border: 1px solid grey;\n  padding: 10px;\n  font-family: Arial, sans-serif;\n}\n  .container--shopping-cart {\n    border: 4px solid orange;\n    background-color: #eee;\n  }\n```\n It is going to work if your BEM modifiers start with `%base%--`. Pretty much the only time when you want to extend something is when you need to take base styles and modify them in a way. `[class^=\"container--\"]` is taking care of a case when classname starts with selector, while `[class*=\" container--\"]` takes care of cases when selector is in the middle or at the end of classname. I noticed that [iconmoon](https://icomoon.io/) icon font generator is using that approach too. So now html could be simplified to following:\n ```html\n <div class=\"container--shopping-cart\">\n   <div class=\"container__content--special-offer\">\n     <h2 class=\"container__title\">Title</h2>\n   </div>\n </div>\n ```\n ## Project organization tips\n [Inuit css](https://github.com/inuitcss/getting-started) is a great example of how css project could be organized. You don't have to use styles from inuit if you don't want to. As long as you follow the same _simple_ rules as outlined in getting started guide, your components will be reusable, while project will be scalable and maintainable. Note how files in inuit are namespaced, you'll get similar benefits as described in an article [More Transparent UI Code with Namespaces](http://csswizardry.com/2015/03/more-transparent-ui-code-with-namespaces/), and you don't necessary have to prefix all your classnames with namespaces. ","source":"_posts/css-organization-naming-conventions-and-safe-extend-without-preprocessors.md","raw":"title: \"CSS organization, naming conventions and safe extend without preprocessors\"\ndate: 2015-03-14 14:37:31\ntags:\noverview: Opinion about how to organize clean and maintainable CSS structure, note about naming conventions, and how one can extend selectors without preprocessors\nimage: image.jpg\nimageSmall: imageSmall.jpg\n---\nMaintainability of CSS project highly depends on developer's choices, on how a project was originally planned. Due to CSS cascading nature, it is easy to end up in a situation when you try to fix or add one thing, which breaks something else. In worst case scenario the issue will remain unnoticed and end up going to production. It is especially hard to work on poorly organized css in a large team (a case where large team has access to CSS files is [not too common](https://css-tricks.com/poll-wrapup-the-number-of-people-touching-css/), but is still valid).\n\n## BEM (or better GRM)\nGood news is that there are battle tested tools and approaches which help to keep things under control. One of them is the famous [BEM](https://en.bem.info/). Lets take a look at the following example:\n```html\n<div class=\"shopping-cart-item\">\n  <div class=\"content special-offer\">\n    <h2 class=\"title\">Title</h2>\n  </div>\n</div>\n```\n\nIf at some point you'll need to remove whole `.content` block from CSS which has nested `.title`, you'll need to check if `.special-offer` or even `.shopping-cart-item` (and other ancestors) also have a nested `.title`.\n\nNow lets take a look at one of the ways to write the same with BEM:\n```html\n<div class=\"container container--shopping-cart\">\n  <div class=\"container__content container__content--special-offer\">\n    <h2 class=\"container__title\">Title</h2>\n  </div>\n</div>\n```\n\nBy looking at this, we immediately know the relationship of each of the elements and can safely do clean up, if we need to remove some styles. BEM is an abbreviation for Block, Element, Modifier and in the example above we can tell that `container` is a Block, `content` and `title` are Elements, `shopping-cart` and `special-offer` are Modifiers. While approach is great, it sounds a bit weird to call `container` a Block and `content` an Element. When someone mentions BEM as an approach for selectors naming, I like to translate it to **GRM** - Group, Role, Modifier. Lets read it again: `container` is a Group, `content` and `title` define Roles within a Group, `shopping-cart` and `special-offer` are Modifiers.\n\n## To extend or not to extend?\nThough there is something that is not nice in the example above. Having duplicated classes feels redundant. Lets see what we can do about it. For html example above styles typically look similar to following:\n```css\n.container {\n  border: 1px solid grey;\n  padding: 10px;\n  font-family: Arial, sans-serif;\n}\n  .container--shopping-cart {\n    border: 4px solid orange;\n    background-color: #eee;\n  }\n```\nIf one use preprocessors we could illuminate a need for duplicated classes using extends. Here is how you can use it with SCSS:\n```scss\n.container {\n  border: 1px solid grey;\n  padding: 10px;\n  font-family: Arial, sans-serif;\n}\n  .container--shopping-cart {\n    @extend .container;\n    border: 4px solid orange;\n    background-color: #eee;\n  }\n```\nHere is a generated result:\n```css\n.container, .container--shopping-cart {\n  border: 1px solid grey;\n  padding: 10px;\n  font-family: Arial, sans-serif;\n}\n  .container--shopping-cart {\n    border: 4px solid orange;\n    background-color: #eee;\n  }\n```\nLooks nice, now we can use both `.container` and `.container--shopping-cart` independently and CSS result still looks good. However `@extend` should be used carefully, as it might significantly increase the size of your CSS file or [jumble specificity](http://csswizardry.com/2014/11/when-to-use-extend-when-to-use-a-mixin/).\n \nSo what can we do here to take advantage of behaviour which `@extend` gives us, but without any risk? Here is a pure CSS solution:\n```scss\n.container, [class^=\"container--\"], [class*=\" container--\"] {\n  border: 1px solid grey;\n  padding: 10px;\n  font-family: Arial, sans-serif;\n}\n  .container--shopping-cart {\n    border: 4px solid orange;\n    background-color: #eee;\n  }\n```\n It is going to work if your BEM modifiers start with `%base%--`. Pretty much the only time when you want to extend something is when you need to take base styles and modify them in a way. `[class^=\"container--\"]` is taking care of a case when classname starts with selector, while `[class*=\" container--\"]` takes care of cases when selector is in the middle or at the end of classname. I noticed that [iconmoon](https://icomoon.io/) icon font generator is using that approach too. So now html could be simplified to following:\n ```html\n <div class=\"container--shopping-cart\">\n   <div class=\"container__content--special-offer\">\n     <h2 class=\"container__title\">Title</h2>\n   </div>\n </div>\n ```\n ## Project organization tips\n [Inuit css](https://github.com/inuitcss/getting-started) is a great example of how css project could be organized. You don't have to use styles from inuit if you don't want to. As long as you follow the same _simple_ rules as outlined in getting started guide, your components will be reusable, while project will be scalable and maintainable. Note how files in inuit are namespaced, you'll get similar benefits as described in an article [More Transparent UI Code with Namespaces](http://csswizardry.com/2015/03/more-transparent-ui-code-with-namespaces/), and you don't necessary have to prefix all your classnames with namespaces. ","slug":"css-organization-naming-conventions-and-safe-extend-without-preprocessors","published":1,"updated":"2015-10-25T18:17:17.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnwmyoe0000834cl0dwh3s7f"},{"title":"Asynchronous programming with ES6 generators, promises and npm-co","date":"2015-02-03T23:20:00.000Z","overview":"Simplify your code by writing<br> an asynchronous code in a synchronous manner","image":"image.jpg?v=1","imageSmall":"imageSmall.jpg","_content":"This article explains what an npm `co` module is, how it works and how it can help you to write much cleaner and simpler asynchronous code.\n## The problem\nWriting asynchronous code could be very tricky, if you never did it before or didn't learn or develop good patterns to approach it. Asynchronous programming in javascript became popular with arrival of single page applications and node.js (where most of the operations happen asynchronously by default). Traditionally javascript was handling async operations using callbacks, and at least once every web developer faced a problem called [`callback hell`](https://www.google.ca/search?q=callback+hell+definition&tbm=isch) or `pyramid of doom`.\n\n## Solutions\nA simple solution is to keep your code shallow, though error handling wouldn't be that simple. Another one, very well established solution is to use promises. Using ES6 generators we can simplify code for promises and continue writing code in a synchronous, easy to follow, manner, while keeping it asynchronous. If you're not familiar with how [promises](#promises) or [generators](#generators) are working, please do a quick research before you continue reading.\n\n### co to the rescue\nco is a wrapper around promises and generators which allows to simplify asynchronous code a lot. Take a look at the example which shows how an async code could be written in a sync manner using co:\n``` js\nco(function* getResults(){\n  //assume read and request perform asynchronous actions\n  var a = read('index.js', 'utf8');\n  var b = request('http://google.ca');\n\n  //when all operations will finish \n  //res will have contents of index.js at [0]\n  //and response body from google at [1]\n  var res = yield [a, b];\n  //...code which does something with res\n}).catch(function (ex) {\n  //if an error was thrown from read or request functions\n});\n```\nHere is what co will do for us:\n* Both read and request will execute in parallel on line 7 and when both of them finish - res array will hold results. It doesn't matter if request finishes before read - co will ensure that results are assigned to appropriate indexes.\n* On node.js you would have to check for errors in both callbacks for read and request functions, to ensure that your application does not exit in an unhandled state, but with co we can only worry about an end result and add a single error handler using `.catch`.\n* Code is rather short and easy to understand\n\nSo what exactly is happening? How does it work? To understand it better lets go over code of the main function in co and describe it. [Open](https://github.com/tj/co/blob/48ca4dcfa6b6a7396aef57e8d78928cfffc814bc/index.js#L41) code in new window so that you can put it side by side.\n\nLet`s modify example just a little, in order to show how various scenarios will work in co:\n``` js example.js\nco(function* getResults(){\n  //not really doing anything important,\n  //but will be useful to show how co works\n  try {\n    yield false;\n  } catch (ex) {\n    console.log(ex.message);\n  }\n\n  //assume read and request perform asynchronous actions\n  var a = read('index.js', 'utf8');\n  var b = request('http://google.ca');\n\n  //when all operations will finish \n  //res will have contents of index.js at [0]\n  //and response body from google at [1]\n  var res = yield [a, b];\n  //...code, which does something with res\n}).catch(function (ex) {\n  //if an error was thrown from read or request functions\n});\n```\n\nFirst co saves context reference, in case you will ever want to use a context inside read or request functions:\n``` js co/index.js:co\nvar ctx = this;\n\n//Context binding example\nco.call(context, function* getResults() {/*'this' will point to context*/})\n```\nThen it checks, if `gen` is a function. If it is, then co needs to initialize a generator object by calling a function and it also ensure that `this` has a proper context. If `gen` is already a generator object, a statement will be skipped:\n``` js co/index.js:co\nif (typeof gen === 'function') gen = gen.call(this);\n```\nThen co returns a new Promise and runs `onFulfilled` function with no arguments. Inside that function it will try to execute a generator code until a first `yield` statement.\n```js co/index.js:onFulfilled\nvar ret;\ntry {\n  ret = gen.next(res); //res is undefined\n}\n```\nIn our case following code would execute inside `getResults` generator:\n``` js example.js\ntry {\n  yield false;\n}\n```\nIf that code could throw an error - promise would be rejected with an error object and co would exit.\n``` js co/index.js:onFulfilled\ncatch (e) {\n  return reject(e);\n}\n```\nIn our case generator returns an object with a `value` property containing yielded value and this object is assigned to `ret`. At that moment of time code would look like that:\n``` js co/index.js:onFulfilled\nvar ret;\ntry {\n  ret = {value: false, done: false};\n}\n```\nThen `onFulfilled` will call `next(ret);`. If `done` would be true, co would resolve a promise with the value and exit from next:\n``` js co/index.js:next\nif (ret.done) return resolve(ret.value);\n```\nOtherwise co attempts to convert `ret.value` to a promise (we'll skip `toPromise` for now). `.call` is there to provide original context in case `ret.value` is another [yieldable](https://github.com/tj/co#yieldables) value:\n```js co/index.js:next\nvar value = toPromise.call(ctx, ret.value);\n```\nOn next line co checks if value is not falsy and if it is a promise, and if so, it adds appropriate handlers for promise fulfilment or rejection and exits from next. \n```js co/index.js:next\nif (value && isPromise(value)) return value.then(onFulfilled, onRejected);\n```\nNotice how `onFulfilled`, `onRejected` and `next` functions have references to `resolve` and `reject` callbacks from a new Promise, which was created at the beginning. If one of these functions calls `resolve` or `reject`, then top most promise will be settled. \n\nIn our case `ret.value` in our case is `false`, so next calls `onRejected` handler, passes it a new TypeError and exits.\n```js co/index.js:next\nreturn onRejected(new TypeError('You may only yield a function, promise, generator, array, or object, '\n        + 'but the following object was passed: \"' + String(ret.value) + '\"'));\n```\n\n`onRejected` is working quite similar to `onFulfilled` function with the following difference - instead of running a code until next `yield` statement, it tries to throw an error inside generator function _at the place where it stopped before_:\n```js co/index.js:onRejected\nvar ret;\ntry {\n  ret = gen.throw(err);\n}\n```\nThat means it will replace `yield false` with `throw err` and example would look like this:\n```js example.js\ntry {\n  throw err; //err is a TypeError\n} catch (ex) {\n  console.log(ex.message);\n}\n```\nThat behaviour is completely normal for generators and is described on MDN:\n{% blockquote MDN https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators %}\nYou can force a generator to throw an exception by calling its throw() method and passing the exception value it should throw. This exception will be thrown from the current suspended context of the generator, as if the yield that is currently suspended were instead a throw value statement.\n{% endblockquote %}\nAt that moment execution flow will get back to example code and, because an error was handled with try-catch, it will be logged in console. Example will continue execution until it will either reach the end of generator or face a new `yield`:\n```js example.js\n  var a = read('index.js', 'utf8');\n  var b = request('http://google.ca');\n  var res = yield [a, b];\n```\nSo result of calling `gen.throw` in `onRejected` returns an array with a and b:\n```js co/index.js:onRejected\nvar ret;\ntry {\n  ret = {value: [a, b], done: false};\n}\n```\nCatch brunch is skipped but it would otherwise reject the promise. Finally, another `next` call happens: it would skip immediate resolve, convert array to a promise created with Promise.all (check out `arrayToPromise` function), which will be settled only when `a` and `b` promises are settled or one of them is rejected. Note how `arrayToPromise` is making sure that Promise.all argument is an array of promises:\n```js co/index.js:arrayToPromise\nobj.map(toPromise, this)\n```\n`toPromise` will first check if value is not falsy and if it is, it returns a value:\n```js co/index.js:toPromise\nif (!obj) return obj;\n```\nIf value is a promise already, toPromise will return it:\n```js co/index.js:toPromise\nif (isPromise(obj)) return obj;\n```\nIf value is a generator or a generator function, toPromise will recursively call co, pass it a context and an obj and as a result we will get a new promise:\n```js co/index.js:toPromise\nif (isGeneratorFunction(obj) || isGenerator(obj)) return co.call(this, obj);\n```\nIf `obj` is a function, toPromise will wrap it in a promise. First argument in a function is assumed to be an error object (node.js error handling pattern, so all node js callback APIs are covered):\n```js co/index.js:toPromise\nif ('function' == typeof obj) return thunkToPromise.call(this, obj);\n```\nIf `obj` is an array or an object with [yieldable](https://github.com/tj/co#yieldables) properties, co will recursively convert them to promises:\n```js co/index.js:toPromise\nif (Array.isArray(obj)) return arrayToPromise.call(this, obj);\nif (isObject(obj)) return objectToPromise.call(this, obj);\n```\nSo co ensures that `a` and `b` are converted to promises, and when both promises are fulfilled - Promise.all will ensure that results are assigned to appropriate indexes in an array. If one of them is rejected, then `.catch` callback from the example will be able to handle an error (log it somewhere, or re-try once again). In either scenario a new Promise (one returned from co at the very beginning) will be settled, code will be executed asynchronously, and in the manner expected by developer, and will have all benefits of central place for error handling.\n\nIn a nutshell this is exactly what happens in co: generators and promises take care of asynchronous operations and error handling, while keeping your code clean and easy to follow. Similar logic will be hidden behind a native support of async programming with [ES7 async-await](https://www.youtube.com/watch?v=DqMFX91ToLw). If you want to use co, generators and Promises in non ES6 environments, try out 6to5 transpiler (links below).\n\nThank you and please feel free to ask questions in the comments, follow us on [facebook](https://www.facebook.com/webuniverseio) and [twitter](https://twitter.com/webuniverseio) pages, or subscribe to our [feed](/atom.xml).\n\n## Links\n* co - https://github.com/tj/co  \n* shallow code - http://exponential.io/blog/unnest-callbacks/\n* 6to5 transpiler (babeljs) - https://babeljs.io/docs/learn-es6/\n\n### Promises<a name=\"promises\"></a>\n* description - https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\n* support - http://kangax.github.io/compat-table/es6/#Promise\n* examples - http://www.2ality.com/2014/09/es6-promises-foundations.html\n\n### Generators<a name=\"generators\"></a>\n* description and examples - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\n* support - http://kangax.github.io/compat-table/es6/#generators\n\n<style type=\"text/css\">.article__title {font-size: 1.72rem;}</style>","source":"_posts/asynchronous-programming-with-ES6-generators-promises-and-npm-co.md","raw":"title: Asynchronous programming with ES6 generators, promises and npm-co\ndate: 2015-02-03 18:20:00\ntags:\noverview: Simplify your code by writing<br> an asynchronous code in a synchronous manner\nimage: image.jpg?v=1\nimageSmall: imageSmall.jpg\n---\nThis article explains what an npm `co` module is, how it works and how it can help you to write much cleaner and simpler asynchronous code.\n## The problem\nWriting asynchronous code could be very tricky, if you never did it before or didn't learn or develop good patterns to approach it. Asynchronous programming in javascript became popular with arrival of single page applications and node.js (where most of the operations happen asynchronously by default). Traditionally javascript was handling async operations using callbacks, and at least once every web developer faced a problem called [`callback hell`](https://www.google.ca/search?q=callback+hell+definition&tbm=isch) or `pyramid of doom`.\n\n## Solutions\nA simple solution is to keep your code shallow, though error handling wouldn't be that simple. Another one, very well established solution is to use promises. Using ES6 generators we can simplify code for promises and continue writing code in a synchronous, easy to follow, manner, while keeping it asynchronous. If you're not familiar with how [promises](#promises) or [generators](#generators) are working, please do a quick research before you continue reading.\n\n### co to the rescue\nco is a wrapper around promises and generators which allows to simplify asynchronous code a lot. Take a look at the example which shows how an async code could be written in a sync manner using co:\n``` js\nco(function* getResults(){\n  //assume read and request perform asynchronous actions\n  var a = read('index.js', 'utf8');\n  var b = request('http://google.ca');\n\n  //when all operations will finish \n  //res will have contents of index.js at [0]\n  //and response body from google at [1]\n  var res = yield [a, b];\n  //...code which does something with res\n}).catch(function (ex) {\n  //if an error was thrown from read or request functions\n});\n```\nHere is what co will do for us:\n* Both read and request will execute in parallel on line 7 and when both of them finish - res array will hold results. It doesn't matter if request finishes before read - co will ensure that results are assigned to appropriate indexes.\n* On node.js you would have to check for errors in both callbacks for read and request functions, to ensure that your application does not exit in an unhandled state, but with co we can only worry about an end result and add a single error handler using `.catch`.\n* Code is rather short and easy to understand\n\nSo what exactly is happening? How does it work? To understand it better lets go over code of the main function in co and describe it. [Open](https://github.com/tj/co/blob/48ca4dcfa6b6a7396aef57e8d78928cfffc814bc/index.js#L41) code in new window so that you can put it side by side.\n\nLet`s modify example just a little, in order to show how various scenarios will work in co:\n``` js example.js\nco(function* getResults(){\n  //not really doing anything important,\n  //but will be useful to show how co works\n  try {\n    yield false;\n  } catch (ex) {\n    console.log(ex.message);\n  }\n\n  //assume read and request perform asynchronous actions\n  var a = read('index.js', 'utf8');\n  var b = request('http://google.ca');\n\n  //when all operations will finish \n  //res will have contents of index.js at [0]\n  //and response body from google at [1]\n  var res = yield [a, b];\n  //...code, which does something with res\n}).catch(function (ex) {\n  //if an error was thrown from read or request functions\n});\n```\n\nFirst co saves context reference, in case you will ever want to use a context inside read or request functions:\n``` js co/index.js:co\nvar ctx = this;\n\n//Context binding example\nco.call(context, function* getResults() {/*'this' will point to context*/})\n```\nThen it checks, if `gen` is a function. If it is, then co needs to initialize a generator object by calling a function and it also ensure that `this` has a proper context. If `gen` is already a generator object, a statement will be skipped:\n``` js co/index.js:co\nif (typeof gen === 'function') gen = gen.call(this);\n```\nThen co returns a new Promise and runs `onFulfilled` function with no arguments. Inside that function it will try to execute a generator code until a first `yield` statement.\n```js co/index.js:onFulfilled\nvar ret;\ntry {\n  ret = gen.next(res); //res is undefined\n}\n```\nIn our case following code would execute inside `getResults` generator:\n``` js example.js\ntry {\n  yield false;\n}\n```\nIf that code could throw an error - promise would be rejected with an error object and co would exit.\n``` js co/index.js:onFulfilled\ncatch (e) {\n  return reject(e);\n}\n```\nIn our case generator returns an object with a `value` property containing yielded value and this object is assigned to `ret`. At that moment of time code would look like that:\n``` js co/index.js:onFulfilled\nvar ret;\ntry {\n  ret = {value: false, done: false};\n}\n```\nThen `onFulfilled` will call `next(ret);`. If `done` would be true, co would resolve a promise with the value and exit from next:\n``` js co/index.js:next\nif (ret.done) return resolve(ret.value);\n```\nOtherwise co attempts to convert `ret.value` to a promise (we'll skip `toPromise` for now). `.call` is there to provide original context in case `ret.value` is another [yieldable](https://github.com/tj/co#yieldables) value:\n```js co/index.js:next\nvar value = toPromise.call(ctx, ret.value);\n```\nOn next line co checks if value is not falsy and if it is a promise, and if so, it adds appropriate handlers for promise fulfilment or rejection and exits from next. \n```js co/index.js:next\nif (value && isPromise(value)) return value.then(onFulfilled, onRejected);\n```\nNotice how `onFulfilled`, `onRejected` and `next` functions have references to `resolve` and `reject` callbacks from a new Promise, which was created at the beginning. If one of these functions calls `resolve` or `reject`, then top most promise will be settled. \n\nIn our case `ret.value` in our case is `false`, so next calls `onRejected` handler, passes it a new TypeError and exits.\n```js co/index.js:next\nreturn onRejected(new TypeError('You may only yield a function, promise, generator, array, or object, '\n        + 'but the following object was passed: \"' + String(ret.value) + '\"'));\n```\n\n`onRejected` is working quite similar to `onFulfilled` function with the following difference - instead of running a code until next `yield` statement, it tries to throw an error inside generator function _at the place where it stopped before_:\n```js co/index.js:onRejected\nvar ret;\ntry {\n  ret = gen.throw(err);\n}\n```\nThat means it will replace `yield false` with `throw err` and example would look like this:\n```js example.js\ntry {\n  throw err; //err is a TypeError\n} catch (ex) {\n  console.log(ex.message);\n}\n```\nThat behaviour is completely normal for generators and is described on MDN:\n{% blockquote MDN https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators %}\nYou can force a generator to throw an exception by calling its throw() method and passing the exception value it should throw. This exception will be thrown from the current suspended context of the generator, as if the yield that is currently suspended were instead a throw value statement.\n{% endblockquote %}\nAt that moment execution flow will get back to example code and, because an error was handled with try-catch, it will be logged in console. Example will continue execution until it will either reach the end of generator or face a new `yield`:\n```js example.js\n  var a = read('index.js', 'utf8');\n  var b = request('http://google.ca');\n  var res = yield [a, b];\n```\nSo result of calling `gen.throw` in `onRejected` returns an array with a and b:\n```js co/index.js:onRejected\nvar ret;\ntry {\n  ret = {value: [a, b], done: false};\n}\n```\nCatch brunch is skipped but it would otherwise reject the promise. Finally, another `next` call happens: it would skip immediate resolve, convert array to a promise created with Promise.all (check out `arrayToPromise` function), which will be settled only when `a` and `b` promises are settled or one of them is rejected. Note how `arrayToPromise` is making sure that Promise.all argument is an array of promises:\n```js co/index.js:arrayToPromise\nobj.map(toPromise, this)\n```\n`toPromise` will first check if value is not falsy and if it is, it returns a value:\n```js co/index.js:toPromise\nif (!obj) return obj;\n```\nIf value is a promise already, toPromise will return it:\n```js co/index.js:toPromise\nif (isPromise(obj)) return obj;\n```\nIf value is a generator or a generator function, toPromise will recursively call co, pass it a context and an obj and as a result we will get a new promise:\n```js co/index.js:toPromise\nif (isGeneratorFunction(obj) || isGenerator(obj)) return co.call(this, obj);\n```\nIf `obj` is a function, toPromise will wrap it in a promise. First argument in a function is assumed to be an error object (node.js error handling pattern, so all node js callback APIs are covered):\n```js co/index.js:toPromise\nif ('function' == typeof obj) return thunkToPromise.call(this, obj);\n```\nIf `obj` is an array or an object with [yieldable](https://github.com/tj/co#yieldables) properties, co will recursively convert them to promises:\n```js co/index.js:toPromise\nif (Array.isArray(obj)) return arrayToPromise.call(this, obj);\nif (isObject(obj)) return objectToPromise.call(this, obj);\n```\nSo co ensures that `a` and `b` are converted to promises, and when both promises are fulfilled - Promise.all will ensure that results are assigned to appropriate indexes in an array. If one of them is rejected, then `.catch` callback from the example will be able to handle an error (log it somewhere, or re-try once again). In either scenario a new Promise (one returned from co at the very beginning) will be settled, code will be executed asynchronously, and in the manner expected by developer, and will have all benefits of central place for error handling.\n\nIn a nutshell this is exactly what happens in co: generators and promises take care of asynchronous operations and error handling, while keeping your code clean and easy to follow. Similar logic will be hidden behind a native support of async programming with [ES7 async-await](https://www.youtube.com/watch?v=DqMFX91ToLw). If you want to use co, generators and Promises in non ES6 environments, try out 6to5 transpiler (links below).\n\nThank you and please feel free to ask questions in the comments, follow us on [facebook](https://www.facebook.com/webuniverseio) and [twitter](https://twitter.com/webuniverseio) pages, or subscribe to our [feed](/atom.xml).\n\n## Links\n* co - https://github.com/tj/co  \n* shallow code - http://exponential.io/blog/unnest-callbacks/\n* 6to5 transpiler (babeljs) - https://babeljs.io/docs/learn-es6/\n\n### Promises<a name=\"promises\"></a>\n* description - https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\n* support - http://kangax.github.io/compat-table/es6/#Promise\n* examples - http://www.2ality.com/2014/09/es6-promises-foundations.html\n\n### Generators<a name=\"generators\"></a>\n* description and examples - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\n* support - http://kangax.github.io/compat-table/es6/#generators\n\n<style type=\"text/css\">.article__title {font-size: 1.72rem;}</style>","slug":"asynchronous-programming-with-ES6-generators-promises-and-npm-co","published":1,"updated":"2018-10-08T15:43:12.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnwmyoea000934cl45ivyte6"},{"title":"Getting started with Reporting API, Network Error Logging & Report URI","image":"image.jpg","imageSmall":"imageSmall.jpg","copyright":"Photo by rawpixel on Unsplash","date":"2018-10-28T15:48:10.000Z","overview":"Quick look at Reporting API which is supported since Chrome M70, deprecation, intervention & crash reports, network error logging and Report URI dashboard.","_content":"This article briefly explains how to enable deprecation, intervention & crash reports as well as network error logging with new browser API. It is pretty much a TL;DR version of [scotthelme.co.uk](https://scotthelme.co.uk/introducing-the-reporting-api-nel-other-major-changes-to-report-uri/) article and reason for writing it in a first place is for me to understand this topic better. I hope you like this short version too and once interested you will subscribe to Scott's blog :\\)\n## Reporting API\nReporting API, which is currently in a status of [working draft](https://www.w3.org/TR/reporting/), allows applications to tell browsers to report things like deprecation warnings to a specified url. Currently Reporting API supports following reporting types:\n- Deprecation - reports soon to be deprecated api. For example `WebSQL is deprecated and will be removed in Chrome 97 around January 2020`. \n- Intervention - reports when browser blocks request due to security or performance reasons. `A request to play audio was blocked because it was not triggered by user activation (such as a click)`.\n- Crashes - reports browser crashes & when possible provides a reason. At the time of writing this only `out-of-memory crash` or `oom` reason was supported.\n\n### `Report-To` header\nIn order to enable reporting api you need to set a response header like following:\n\n`Report-To: {\"group\":\"default\",\"max_age\":604800,\"endpoints\":[{\"url\":\"https://endpoint/path\"}],\"include_subdomains\":true}`\n\nFor deprecation/intervention/crash report types you should use `default` for group name, so we can leave it alone. `max_age` tells browser to remember to send requests to specified endpoints for given time in seconds (in the example it is set to 7 days). You can specify multiple endpoints if you wish.\n\n## Network error logging\nNetwork error logging, which is also in a status of [working draft](https://www.w3.org/TR/network-error-logging/), allows to report issues with:\n - dns `unreachable, name_not_resolved, ...`\n - tcp `timed_out, refused, ...`\n - tls `cert.name_invalid, cert.authority_invalid, ...`\n - http `response.invalid, response.redirect_loop, ...`\n - abandoned\n - unknown\n \nFull list with descriptions can be found on the [specification page](https://www.w3.org/TR/network-error-logging/#dns-resolution-errors).\n \n### `NEL` header\nIn order to enable network error logging you need to set a response header like following:\n \n`NEL: {\"report_to\":\"default\",\"max_age\":604800,\"include_subdomains\":true}`\n \nAs you can see there is no endpoints property. `Report-To` should be specified for this header, because `NEL` uses endpoints from it to report data.\n \n## Working with reports & `report-uri.com`\nYou could build your own dashboard which handles reports for mentioned APIs. Sample report data structure is shown on previously mentioned specification pages. However there is a free to use service called [Report URI](https://report-uri.com/) which already handles these and other type of reports. It takes 5-10 minutes to set it up and as long as it is easy for you to add headers to your site, it should be very easy to start gathering data from Reporting & Network Error Logging APIs. It took it just about 30 minutes for me to add it to my site & I encourage you to do the same.\n \nThanks for reading & have fun.","source":"_posts/Getting-started-with-Reporting-API-Network-Error-Logging-Report-URI.md","raw":"title: 'Getting started with Reporting API, Network Error Logging & Report URI'\nimage: image.jpg\nimageSmall: imageSmall.jpg\ncopyright: Photo by rawpixel on Unsplash\ndate: 2018-10-28 11:48:10\ntags:\noverview: Quick look at Reporting API which is supported since Chrome M70, deprecation, intervention & crash reports, network error logging and Report URI dashboard.\n---\nThis article briefly explains how to enable deprecation, intervention & crash reports as well as network error logging with new browser API. It is pretty much a TL;DR version of [scotthelme.co.uk](https://scotthelme.co.uk/introducing-the-reporting-api-nel-other-major-changes-to-report-uri/) article and reason for writing it in a first place is for me to understand this topic better. I hope you like this short version too and once interested you will subscribe to Scott's blog :\\)\n## Reporting API\nReporting API, which is currently in a status of [working draft](https://www.w3.org/TR/reporting/), allows applications to tell browsers to report things like deprecation warnings to a specified url. Currently Reporting API supports following reporting types:\n- Deprecation - reports soon to be deprecated api. For example `WebSQL is deprecated and will be removed in Chrome 97 around January 2020`. \n- Intervention - reports when browser blocks request due to security or performance reasons. `A request to play audio was blocked because it was not triggered by user activation (such as a click)`.\n- Crashes - reports browser crashes & when possible provides a reason. At the time of writing this only `out-of-memory crash` or `oom` reason was supported.\n\n### `Report-To` header\nIn order to enable reporting api you need to set a response header like following:\n\n`Report-To: {\"group\":\"default\",\"max_age\":604800,\"endpoints\":[{\"url\":\"https://endpoint/path\"}],\"include_subdomains\":true}`\n\nFor deprecation/intervention/crash report types you should use `default` for group name, so we can leave it alone. `max_age` tells browser to remember to send requests to specified endpoints for given time in seconds (in the example it is set to 7 days). You can specify multiple endpoints if you wish.\n\n## Network error logging\nNetwork error logging, which is also in a status of [working draft](https://www.w3.org/TR/network-error-logging/), allows to report issues with:\n - dns `unreachable, name_not_resolved, ...`\n - tcp `timed_out, refused, ...`\n - tls `cert.name_invalid, cert.authority_invalid, ...`\n - http `response.invalid, response.redirect_loop, ...`\n - abandoned\n - unknown\n \nFull list with descriptions can be found on the [specification page](https://www.w3.org/TR/network-error-logging/#dns-resolution-errors).\n \n### `NEL` header\nIn order to enable network error logging you need to set a response header like following:\n \n`NEL: {\"report_to\":\"default\",\"max_age\":604800,\"include_subdomains\":true}`\n \nAs you can see there is no endpoints property. `Report-To` should be specified for this header, because `NEL` uses endpoints from it to report data.\n \n## Working with reports & `report-uri.com`\nYou could build your own dashboard which handles reports for mentioned APIs. Sample report data structure is shown on previously mentioned specification pages. However there is a free to use service called [Report URI](https://report-uri.com/) which already handles these and other type of reports. It takes 5-10 minutes to set it up and as long as it is easy for you to add headers to your site, it should be very easy to start gathering data from Reporting & Network Error Logging APIs. It took it just about 30 minutes for me to add it to my site & I encourage you to do the same.\n \nThanks for reading & have fun.","slug":"Getting-started-with-Reporting-API-Network-Error-Logging-Report-URI","published":1,"updated":"2018-10-29T00:31:09.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnwmyoej000a34clgvn1mcw1"},{"title":"Creating & publishing a browser extension or How changing a Stride favicon improved my performance by 40%","date":"2018-10-31T03:40:27.000Z","overview":"Small change in stride chat web client improved my performance by 40%. In this article you'll learn how to start working with chrome extensions & how to upload your extension to chrome store.","_content":"In this video you're going to learn about a UX problem in Stride web application due to distracting favicon & a way to address this by writing & publishing a custom extension.\n\n{% raw %}\n<iframe style=\"margin-top: 1em;\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/lw9yk0w7S78\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n{% endraw %}\n\nLinks from the video:\n- [Get started with extensions](https://developer.chrome.com/extensions/getstarted)\n- [Example repo](https://github.com/k1LoW/backlog-favicon-changer/) \n- **[Stride favicon repo](https://github.com/szarouski/stride-favicon)**\n- [Permissions description](https://developer.chrome.com/extensions/permission_warnings) \n- [Content scripts description](https://developer.chrome.com/extensions/content_scripts)\n- [Chrome webstore dashboard](https://chrome.google.com/webstore/developer/dashboard?pli=1&authuser=1)","source":"_posts/Creating-publishing-a-browser-extension-or-How-changing-a-Stride-favicon-improved-my-performance-by-40.md","raw":"title: >-\n  Creating & publishing a browser extension or How changing a Stride favicon\n  improved my performance by 40%\ndate: 2018-10-30 23:40:27\ntags:\noverview: Small change in stride chat web client improved my performance by 40%. In this article you'll learn how to start working with chrome extensions & how to upload your extension to chrome store.\n---\nIn this video you're going to learn about a UX problem in Stride web application due to distracting favicon & a way to address this by writing & publishing a custom extension.\n\n{% raw %}\n<iframe style=\"margin-top: 1em;\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/lw9yk0w7S78\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n{% endraw %}\n\nLinks from the video:\n- [Get started with extensions](https://developer.chrome.com/extensions/getstarted)\n- [Example repo](https://github.com/k1LoW/backlog-favicon-changer/) \n- **[Stride favicon repo](https://github.com/szarouski/stride-favicon)**\n- [Permissions description](https://developer.chrome.com/extensions/permission_warnings) \n- [Content scripts description](https://developer.chrome.com/extensions/content_scripts)\n- [Chrome webstore dashboard](https://chrome.google.com/webstore/developer/dashboard?pli=1&authuser=1)","slug":"Creating-publishing-a-browser-extension-or-How-changing-a-Stride-favicon-improved-my-performance-by-40","published":1,"updated":"2018-10-31T03:56:05.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnwmyoeq000b34clih42dvok"}],"PostAsset":[{"_id":"source/_posts/manage-project-dependencies-with-simple-installer/image.png","post":"cjnwmyodf000634cly5q62ln9","slug":"image.png","modified":1},{"_id":"source/_posts/manage-project-dependencies-with-simple-installer/imageSmall.png","post":"cjnwmyodf000634cly5q62ln9","slug":"imageSmall.png","modified":1},{"_id":"source/_posts/manage-project-dependencies-with-simple-installer/simple-installer.gif","post":"cjnwmyodf000634cly5q62ln9","slug":"simple-installer.gif","modified":1},{"_id":"source/_posts/cyclomatic-complexity-refactoring-tips/image.jpg","post":"cjnwmyodt000734clgfs5qrhk","slug":"image.jpg","modified":1},{"_id":"source/_posts/cyclomatic-complexity-refactoring-tips/imageSmall.jpg","post":"cjnwmyodt000734clgfs5qrhk","slug":"imageSmall.jpg","modified":1},{"_id":"source/_posts/css-organization-naming-conventions-and-safe-extend-without-preprocessors/image.jpg","post":"cjnwmyoe0000834cl0dwh3s7f","slug":"image.jpg","modified":1},{"_id":"source/_posts/css-organization-naming-conventions-and-safe-extend-without-preprocessors/imageSmall.jpg","post":"cjnwmyoe0000834cl0dwh3s7f","slug":"imageSmall.jpg","modified":1},{"_id":"source/_posts/asynchronous-programming-with-ES6-generators-promises-and-npm-co/image.jpg","post":"cjnwmyoea000934cl45ivyte6","slug":"image.jpg","modified":1},{"_id":"source/_posts/asynchronous-programming-with-ES6-generators-promises-and-npm-co/imageSmall.jpg","post":"cjnwmyoea000934cl45ivyte6","slug":"imageSmall.jpg","modified":1},{"_id":"source/_posts/Getting-started-with-Reporting-API-Network-Error-Logging-Report-URI/image.jpg","post":"cjnwmyoej000a34clgvn1mcw1","slug":"image.jpg","modified":1},{"_id":"source/_posts/Getting-started-with-Reporting-API-Network-Error-Logging-Report-URI/imageSmall.jpg","post":"cjnwmyoej000a34clgvn1mcw1","slug":"imageSmall.jpg","modified":1}],"PostCategory":[],"PostTag":[],"Tag":[]}}