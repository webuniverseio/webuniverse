<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Web Universe]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://webuniverse.io/"/>
  <updated>2015-10-25T18:29:18.231Z</updated>
  <id>http://webuniverse.io/</id>
  
  <author>
    <name><![CDATA[Sergey Zarouski]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Cyclomatic complexity refactoring tips for javascript developers]]></title>
    <link href="http://webuniverse.io/cyclomatic-complexity-refactoring-tips/"/>
    <id>http://webuniverse.io/cyclomatic-complexity-refactoring-tips/</id>
    <published>2015-10-23T04:00:00.000Z</published>
    <updated>2015-10-25T18:29:18.231Z</updated>
    <content type="html"><![CDATA[<p>This article briefly explains what is cyclomatic complexity and gives practical tips about how to make your projects maintainable.</p>
<h2 id="Cyclomatic_complexity">Cyclomatic complexity</h2><p>In short cyclomatic complexity is a number which indicates how many execution scenarios there might be inside your code. Everyday developers read lots of code and during this process they try to imagine what the code is doing. The more execution scenarios they see in the code, the harder it is to keep track of what is going on. That leads to misunderstanding and therefore to hacks and buggy implementations. Conditional operators increase cyclomatic complexity, so it is a matter of keeping them under control. Following operators will increase cyclomatic complexity in javascript:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if | while | for | case | || | catch | ternary operator ?:</span><br></pre></td></tr></table></figure></p>
<p>Below is an example of how you don’t want your code to look as it will be too complex to understand:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="keyword">while</span> (condition ? expression : expression) &#123;</span><br><span class="line">      <span class="keyword">if</span> (condition || condition &amp;&amp; condition) &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//... a few more conditions like this and there is a 100% chance that we'll need a debugger today</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Functions_as_a_way_to_reduce_complexity">Functions as a way to reduce complexity</h2><p>We break down code into functions not only to make sure that we don’t repeat ourselves, but also to define a scoped scenario which we can understand more easily. If code inside function was written without side effects (does only one thing and exactly what it says it does - that is what we’re expecting from APIs which does not belong to us, right? :)), it is enough for us take a look at function’s name to get the idea about what it is doing.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!isInstalled()) &#123;</span><br><span class="line">    chooseInstallProcess();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isInstalled</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chooseInstallProcess</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (shouldSkipDownload()) &#123;</span><br><span class="line">    installProgram();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    downloadAndInstall();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shouldSkipDownload</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadAndInstall</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  downloadProgram();</span><br><span class="line">  installProgram();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadProgram</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">installProgram</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>It is much easier to read code which is broken into smaller functions, isn’t it? Small functions alone will improve readability of your code and make whole app much more stable and maintainable. <strong>When we split code into functions we split cyclomatic complexity.</strong></p>
<h2 id="Tools">Tools</h2><p>Code analysis tools like <a href="http://eslint.org/docs/rules/complexity.html" target="_blank" rel="external">eslint</a> or <a href="http://jshint.com/docs/options/#maxcomplexity" target="_blank" rel="external">jshint</a> will help you to find the value of cyclomatic complexity per each function. All you need to do is to define a max value after which they’ll start logging errors. My personal preference for max complexity is 3 as it will guarantee that my functions will be small. Code below will fail complexity check:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">firstName, lastName</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//cyclomatic complexity always starts from 1</span></span><br><span class="line">  <span class="keyword">if</span> (firstName &amp;&amp; lastName) &#123; <span class="comment">//if operator, +1</span></span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">' '</span> + lastName;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstName) &#123; <span class="comment">// +1</span></span><br><span class="line">    <span class="keyword">return</span> firstName;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lastName) &#123; <span class="comment">// +1</span></span><br><span class="line">    <span class="keyword">return</span> lastName;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!firstName &amp;&amp; !lastName) &#123; <span class="comment">// +1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'stranger'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//total complexity is 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>And following code will pass:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNameOrFallback</span>(<span class="params">name, fallback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//complexity starts from 1</span></span><br><span class="line">  <span class="keyword">return</span> name || fallback; <span class="comment">//|| operator, +1</span></span><br><span class="line">  <span class="comment">//total complexity is 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">firstName, lastName</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//complexity starts from 1</span></span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">if</span> (firstName) &#123; <span class="comment">//if operator, +1</span></span><br><span class="line">    name = firstName;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (lastName) &#123; <span class="comment">// +1</span></span><br><span class="line">    name += <span class="string">' '</span> + lastName;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//even though complexity for getNameOrFallback is 2, it doesn't add up to complexity of current function</span></span><br><span class="line">  <span class="keyword">return</span> getNameOrFallback(name.trim(), <span class="string">'stranger'</span>);</span><br><span class="line">  <span class="comment">//total complexity is 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>When max complexity is set to 3 we can use at least two <code>if</code> operators, which is more than enough per function. Every time, when you run into situation, where you need complexity to be more than 3 - you need to refactor, move part of the logic into a separate function or both.</p>
<h2 id="Refactoring_tips">Refactoring tips</h2><p>There are a few scenarios where you might be tempted to disable or increase max-complexity. It is always a bad decision, so let me show you a few examples and how code can be refactored to meet your standards.</p>
<h3 id="Refactoring_a_switch-like_logic">Refactoring a switch-like logic</h3><p>Following example can be arbitrary complex:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMarkupForError</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (error) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'validation-error'</span>:</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'network-error'</span>:</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'server-error'</span>:</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="comment">//... more cases</span></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">//...handle unknown error</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//arbitrary complex</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>The same example also can be re-written with if/if-else/else operators:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMarkupForError</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error === <span class="string">'validation-error'</span>) &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (error === <span class="string">'network-error'</span>) &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (error === <span class="string">'server-error'</span>) &#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">  <span class="comment">//...more conditions</span></span><br><span class="line">  <span class="keyword">else</span> &#123;<span class="comment">/*...handle unknown error*/</span>&#125;</span><br><span class="line">  <span class="comment">//arbitrary complex</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>In order to reduce complexity here you simply need to create a map object:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMarkupForError</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> errorTypeToMarkupMap = &#123;</span><br><span class="line">    <span class="string">'validation-error'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span>&#125;,</span><br><span class="line">    <span class="string">'network-error'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span>&#125;,</span><br><span class="line">    <span class="string">'server-error'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span>&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (errorTypeToMarkupMap.hasOwnProperty(error)) &#123;</span><br><span class="line">    <span class="keyword">return</span> errorTypeToMarkupMap[error];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*...handle unknown error*/</span></span><br><span class="line">  <span class="comment">//total complexity of this function will be 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Refactoring_logic_which_follows_a_pattern">Refactoring logic which follows a pattern</h3><p>Following example is a bit more complex so we can’t use switch:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">highlightCurrentSection</span>(<span class="params">$t</span>) </span>&#123;</span><br><span class="line">  $t.find(<span class="string">'.menu__item'</span>).removeClass(<span class="string">'active'</span>);</span><br><span class="line">  <span class="keyword">let</span> pathname = <span class="built_in">window</span>.location.pathname;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/\/(books|livres)/i</span>.test(pathname)) &#123;</span><br><span class="line">    $t.find(<span class="string">'.menu__books'</span>).addClass(<span class="string">'active'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/\/(baby|bebe)/i</span>.test(pathname)) &#123;</span><br><span class="line">    $t.find(<span class="string">'.menu__baby'</span>).addClass(<span class="string">'active'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/\/(house-and-home|maison)/i</span>.test(pathname)) &#123;</span><br><span class="line">    $t.find(<span class="string">'.menu__houseandhome'</span>).addClass(<span class="string">'active'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...more conditions</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/\/giftcards/i</span>.test(pathname)) &#123;</span><br><span class="line">    $t.find(<span class="string">'.menu__giftcards'</span>).addClass(<span class="string">'active'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//arbitrary complex</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>We can see that branches are following a pattern - we check that regex is matching current location and add an <code>active</code> class to specified selector. The same code can be simplified if we create an array of objects, which contain a pattern and a selector and loop through it:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">highlightCurrentSection</span>(<span class="params">$t</span>) </span>&#123;</span><br><span class="line">  $t.find(<span class="string">'.menu__item'</span>).removeClass(<span class="string">'active'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> menuItems = [</span><br><span class="line">    &#123;pattern: <span class="regexp">/\/(books|livres)/i</span>, className: <span class="string">'.menu__books'</span>&#125;,</span><br><span class="line">    &#123;pattern: <span class="regexp">/\/(baby|bebe)/i</span>, className: <span class="string">'.menu__baby'</span>&#125;,</span><br><span class="line">    &#123;pattern: <span class="regexp">/\/(house-and-home|maison)/i</span>, className: <span class="string">'.menu__houseandhome'</span>&#125;,</span><br><span class="line">    &#123;pattern: <span class="regexp">/\/giftcards/i</span>, className: <span class="string">'.menu__giftcards'</span>&#125;</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">let</span> hasMatch = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">let</span> pathname = <span class="built_in">window</span>.location.pathname;</span><br><span class="line">  _.each(menuItems, <span class="function"><span class="keyword">function</span> <span class="title">addClassIfNeeded</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!hasMatch &amp;&amp; params.pattern.test(pathname)) &#123;</span><br><span class="line">      $t.find(params.className).addClass(<span class="string">'active'</span>);</span><br><span class="line">      hasMatch = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//total complexity of addClassIfNeeded is 2</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//total complexity of highlightCurrentSection function is 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Refactoring_logic_where_branches_have_similar_purpose">Refactoring logic where branches have similar purpose</h3><p>In following example we can see that branches inside lookupModule have the same purpose, but code inside conditions and inside branches doesn’t follow a pattern:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lookupModule</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sharedPathsConfig = <span class="built_in">require</span>(<span class="string">'../sharedPathsConfig'</span>);</span><br><span class="line">  <span class="keyword">let</span> overWritesForServer = <span class="string">'events'</span>;</span><br><span class="line">  <span class="keyword">let</span> map = &#123;react: <span class="string">'react/addons'</span>, jquery: overWritesForServer&#125;;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/^\$.+/</span>.test(id)) &#123;</span><br><span class="line">    <span class="keyword">return</span> overWritesForServer;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (map[id]) &#123;</span><br><span class="line">    <span class="keyword">return</span> map[id];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (id <span class="keyword">in</span> sharedPathsConfig.paths) &#123;</span><br><span class="line">    <span class="keyword">return</span> path.join(process.cwd(), sharedPathsConfig.paths[id]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...more conditions</span></span><br><span class="line">  <span class="keyword">return</span> id;</span><br><span class="line">  <span class="comment">//total complexity of lookupModule is arbitrary</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>On order to refactor this we can create an array of objects which contain a callback for condition and a callback for logic and iterate over it:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lookupModule</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sharedPathsConfig = <span class="built_in">require</span>(<span class="string">'../sharedPathsConfig'</span>);</span><br><span class="line">  <span class="keyword">let</span> overWritesForServer = <span class="string">'events'</span>;</span><br><span class="line">  <span class="keyword">let</span> map = &#123;react: <span class="string">'react/addons'</span>, jquery: overWritesForServer&#125;;</span><br><span class="line">  <span class="keyword">let</span> lookupActions = [</span><br><span class="line">    &#123;</span><br><span class="line">      condition: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="regexp">/^\$.+/</span>.test(id);&#125;,</span><br><span class="line">      result: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> overWritesForServer;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      condition: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> map[id];&#125;,</span><br><span class="line">      result: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> map[id];&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      condition: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> id <span class="keyword">in</span> sharedPathsConfig.paths;&#125;,</span><br><span class="line">      result: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> path.join(process.cwd(), sharedPathsConfig.paths[id]);&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//...more conditions</span></span><br><span class="line">    &#123;</span><br><span class="line">      condition: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;,</span><br><span class="line">      result: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> id;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ];</span><br><span class="line">  <span class="comment">//Symbol.iterator is used here for simplicity, you can use a polyfill function `makeIterator` from</span></span><br><span class="line">  <span class="comment">//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators</span></span><br><span class="line">  <span class="keyword">let</span> actionsIterator = lookupActions[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  <span class="keyword">while</span> (!result) &#123;</span><br><span class="line">    <span class="keyword">let</span> action = actionsIterator.next().value;</span><br><span class="line">    <span class="keyword">if</span> (action.condition()) &#123;</span><br><span class="line">      result = action.result();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">  <span class="comment">//total complexity of lookupModule function is 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Final_thoughts">Final thoughts</h2><p>Cyclomatic complexity defines how many use cases we should keep in mind (and how many tests we need to create) while working with a program. It is important to keep cyclomatic complexity under control and as we could see with a little practice we can keep it low quite easily.</p>
<p>I hope you liked this article. Please share your thoughts an tips in comments.</p>
<h2 id="Links">Links</h2><p><a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity" target="_blank" rel="external">Cyclomatic complexity</a> - Wikipedia<br><a href="http://eslint.org/docs/user-guide/integrations" target="_blank" rel="external">eslint integrations</a> with editors and build tools<br><a href="http://jshint.com/install/" target="_blank" rel="external">jshint integrations</a> with editors and build tools</p>
<style>
.article__title {font-size: 32px;}
@media (max-width: 540px) {
    .article__title {font-size: 25px;}
}
</style>]]></content>
    <summary type="html">
    <![CDATA[<p>This article briefly explains what is cyclomatic complexity and gives practical tips about how to make your projects maintainable.</p>
<h]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Manage project dependencies with simple-installer]]></title>
    <link href="http://webuniverse.io/manage-project-dependencies-with-simple-installer/"/>
    <id>http://webuniverse.io/manage-project-dependencies-with-simple-installer/</id>
    <published>2015-04-05T14:52:22.000Z</published>
    <updated>2015-10-25T18:15:39.569Z</updated>
    <content type="html"><![CDATA[<p>In this article you’re going to learn about a program installation manager similar to <a href="https://chocolatey.org/" target="_blank" rel="external">chocolatey</a> or <code>apt-get</code>, which is running on node.js. It is called <a href="https://github.com/szarouski/SimpleInstaller" target="_blank" rel="external"><code>SimpleInstaller</code></a> and it can also work as a downloader and a task runner. We’re going to look at a few simple usage examples and then we’re going to see how SimpleInstaller can be integrated into project setup workflow, to bring new members of the team up to speed. </p>
<h2 id="Top_level_highlights">Top level highlights</h2><ul>
<li>is crossplatform (tested on windows and debian)</li>
<li>downloads files (optional) and runs commands</li>
<li>skips already installed programs</li>
<li>could be used as a simple task runner</li>
<li>could work as a downloader</li>
<li>simple and because of that flexible and extendable <a href="https://github.com/szarouski/SimpleInstaller#api" target="_blank" rel="external">api</a></li>
<li>tested with 100% coverage</li>
<li>uses harmony mode for generators and <code>npm co</code> to manage execution flow</li>
</ul>
<h2 id="Example:_Installing_git_on_Debian">Example: Installing git on Debian</h2><p>Lets take a look at how it can be used to install a program. Here it installs git via <code>apt-get</code> on debian:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>);</span><br><span class="line"><span class="keyword">var</span> SimpleInstaller = <span class="built_in">require</span>(<span class="string">'simple-installer'</span>);</span><br><span class="line"></span><br><span class="line">co(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">new</span> SimpleInstaller(&#123;</span><br><span class="line">        prefix: <span class="string">'apt-get install '</span>,</span><br><span class="line">        name: <span class="string">'git'</span></span><br><span class="line">    &#125;).run();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>Since SimpleInstaller is using generators, it is <a href="/asynchronous-programming-with-ES6-generators-promises-and-npm-co/">recommended</a> to use npm modules like <code>co</code> to keep asynchronous code in a synchronous / maintainable manner.</p>
<h2 id="Example:_Installing_ruby_on_Windows">Example: Installing ruby on Windows</h2><p>This example downloads ruby and installs it on Windows:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>);</span><br><span class="line"><span class="keyword">var</span> SimpleInstaller = <span class="built_in">require</span>(<span class="string">'simple-installer'</span>);</span><br><span class="line"></span><br><span class="line">co(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> installer = <span class="keyword">new</span> SimpleInstaller(&#123;</span><br><span class="line">        link: <span class="string">'https://dl.bintray.com/oneclick/rubyinstaller/rubyinstaller-2.2.1-x64.exe?direct'</span>,</span><br><span class="line">        name: <span class="string">'ruby'</span>,</span><br><span class="line">        postfix: <span class="string">' /verysilent /dir="c:\\Ruby2" /tasks="assocfiles,modpath"'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">yield</span> installer.run();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>Fortunately rubyinstaller has command line interface which supports <code>/verysilent</code> mode - which allows us to install a program without a single popup.</p>
<h2 id="Example:_Batch_installation">Example: Batch installation</h2><div style="text-align: center;margin-top: 1em;"><a href="simple-installer.gif"><img src="simple-installer.gif" alt="Installation process"></a></div>

<p>When we setup a new machine for a new team member, or when we start on a project developed by another company, we need to install all dependencies which are required for project to build and run. Those could be node modules, ruby gems, git repositories, bower components, etc… Lets take a look at how we could use SimpleInstaller to make project dependencies installation as simple as possible.</p>
<p>First we’re going to create a module <code>config.js</code>, which exports an array of program <code>info</code> objects, which are required to build and run our project:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = [&#123;</span><br><span class="line">    link: <span class="string">'https://dl.bintray.com/oneclick/rubyinstaller/rubyinstaller-2.2.1-x64.exe?direct'</span>,</span><br><span class="line">    name: <span class="string">'ruby'</span>,</span><br><span class="line">    postfix: <span class="string">' /verysilent /dir="c:\\Ruby2" /tasks="assocfiles,modpath"'</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    link: <span class="string">'http://github.com/msysgit/msysgit/releases/download/'</span> +</span><br><span class="line">    <span class="string">'Git-1.9.4-preview20140929/Git-1.9.4-preview20140929.exe'</span>,</span><br><span class="line">    name: <span class="string">'git.exe'</span>,</span><br><span class="line">    postfix: <span class="string">' /DIR="c:\\Git" /VERYSILENT /NORESTART /NOCANCEL /SP- /CLOSEAPPLICATIONS /RESTARTAPPLICATIONS /NOICONS '</span> +</span><br><span class="line">    <span class="string">'/COMPONENTS="icons,ext\\reg\\shellhere,assoc,assoc_sh" /LOADINF="'</span> + path.resolve(__dirname, <span class="string">'git.inf'</span>) + <span class="string">'"'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    prefix: <span class="string">'npm i '</span>,</span><br><span class="line">    name: <span class="string">'karma'</span>,</span><br><span class="line">    postfix: <span class="string">'-cli -g'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    prefix: <span class="string">'npm i '</span>,</span><br><span class="line">    name: <span class="string">'grunt'</span>,</span><br><span class="line">    postfix: <span class="string">'-cli -g'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    prefix: <span class="string">'npm i '</span>,</span><br><span class="line">    name: <span class="string">'bower'</span>,</span><br><span class="line">    postfix: <span class="string">' -g'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    prefix: <span class="string">'SET PATH=%PATH%;c:\\Ruby2\\bin&amp;&amp;gem install '</span>,</span><br><span class="line">    name: <span class="string">'compass'</span>,</span><br><span class="line">    postfix: <span class="string">' -v 1.0.1'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    prefix: <span class="string">'echo '</span>,</span><br><span class="line">    name: <span class="string">'bower_components'</span>,</span><br><span class="line">    postfix: <span class="string">'&amp;&amp;SET PATH=%PATH%;c:\\Git\\bin\\&amp;&amp;bower install'</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></p>
<p>Here we can see that project requires a few global node packages, along with git, ruby and compass gem. As a final step it also runs <code>bower install</code> to install client side dependencies.</p>
<p>Next we need to create a module <code>installer.js</code> which will contain installation logic:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>); <span class="comment">//use co and lodash to simplify code</span></span><br><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>);</span><br><span class="line"><span class="keyword">var</span> SimpleInstaller = <span class="built_in">require</span>(<span class="string">'simple-installer'</span>);</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./config'</span>); <span class="comment">//our config</span></span><br><span class="line"></span><br><span class="line">co(<span class="function"><span class="keyword">function</span>* <span class="title">runCoroutine</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//first we convert array of objects to array of generators</span></span><br><span class="line">    <span class="keyword">var</span> setup = _.map(config, <span class="function"><span class="keyword">function</span>* <span class="title">runInstaller</span>(<span class="params">info</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> installer = <span class="keyword">new</span> SimpleInstaller(info);</span><br><span class="line">        <span class="keyword">yield</span> installer.run();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//then iterate and run installers, one at a time</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, length = setup.length; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">yield</span> setup[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Installation finished'</span>.yellow);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">ex</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">throwUnhandledException</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'setup failed'</span>.red);</span><br><span class="line">        <span class="built_in">console</span>.log((ex.message ? ex.message : ex).red);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>And finally we need to find a good place to run installer.js. I like using it in package.json postinstall script:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"preinstall"</span>: <span class="string">"npm cache clean"</span>,</span><br><span class="line">    <span class="string">"postinstall"</span>: <span class="string">"node --harmony installer.js&amp;&amp;npm shrinkwrap --dev"</span>,</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>That way, after <code>npm install</code>, once we get all node_modules, we can run our installer, which in turn will install all missing dependencies.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In this article you’re going to learn about a program installation manager similar to <a href="https://chocolatey.org/" target="_blank" r]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS organization, naming conventions and safe extend without preprocessors]]></title>
    <link href="http://webuniverse.io/css-organization-naming-conventions-and-safe-extend-without-preprocessors/"/>
    <id>http://webuniverse.io/css-organization-naming-conventions-and-safe-extend-without-preprocessors/</id>
    <published>2015-03-14T18:37:31.000Z</published>
    <updated>2015-10-25T18:17:17.557Z</updated>
    <content type="html"><![CDATA[<p>Maintainability of CSS project highly depends on developer’s choices, on how a project was originally planned. Due to CSS cascading nature, it is easy to end up in a situation when you try to fix or add one thing, which breaks something else. In worst case scenario the issue will remain unnoticed and end up going to production. It is especially hard to work on poorly organized css in a large team (a case where large team has access to CSS files is <a href="https://css-tricks.com/poll-wrapup-the-number-of-people-touching-css/" target="_blank" rel="external">not too common</a>, but is still valid).</p>
<h2 id="BEM_(or_better_GRM)">BEM (or better GRM)</h2><p>Good news is that there are battle tested tools and approaches which help to keep things under control. One of them is the famous <a href="https://en.bem.info/" target="_blank" rel="external">BEM</a>. Lets take a look at the following example:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"shopping-cart-item"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"content special-offer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h2</span> <span class="attribute">class</span>=<span class="value">"title"</span>&gt;</span>Title<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>If at some point you’ll need to remove whole <code>.content</code> block from CSS which has nested <code>.title</code>, you’ll need to check if <code>.special-offer</code> or even <code>.shopping-cart-item</code> (and other ancestors) also have a nested <code>.title</code>.</p>
<p>Now lets take a look at one of the ways to write the same with BEM:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container container--shopping-cart"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container__content container__content--special-offer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h2</span> <span class="attribute">class</span>=<span class="value">"container__title"</span>&gt;</span>Title<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>By looking at this, we immediately know the relationship of each of the elements and can safely do clean up, if we need to remove some styles. BEM is an abbreviation for Block, Element, Modifier and in the example above we can tell that <code>container</code> is a Block, <code>content</code> and <code>title</code> are Elements, <code>shopping-cart</code> and <code>special-offer</code> are Modifiers. While approach is great, it sounds a bit weird to call <code>container</code> a Block and <code>content</code> an Element. When someone mentions BEM as an approach for selectors naming, I like to translate it to <strong>GRM</strong> - Group, Role, Modifier. Lets read it again: <code>container</code> is a Group, <code>content</code> and <code>title</code> define Roles within a Group, <code>shopping-cart</code> and <code>special-offer</code> are Modifiers.</p>
<h2 id="To_extend_or_not_to_extend?">To extend or not to extend?</h2><p>Though there is something that is not nice in the example above. Having duplicated classes feels redundant. Lets see what we can do about it. For html example above styles typically look similar to following:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.container</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid grey</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">font-family</span>:<span class="value"> Arial, sans-serif</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line">  <span class="class">.container--shopping-cart</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">4px</span> solid orange</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#eee</span></span></span>;</span><br><span class="line">  &#125;</span></span><br></pre></td></tr></table></figure></p>
<p>If one use preprocessors we could illuminate a need for duplicated classes using extends. Here is how you can use it with SCSS:<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">border</span><span class="value">: <span class="number">1px</span> solid grey;</span></span><br><span class="line">  <span class="attribute">padding</span><span class="value">: <span class="number">10px</span>;</span></span><br><span class="line">  <span class="attribute">font-family</span><span class="value">: Arial, sans-serif;</span></span><br><span class="line">&#125;</span><br><span class="line">  <span class="class">.container--shopping-cart</span> &#123;</span><br><span class="line">    <span class="at_rule">@<span class="keyword">extend</span><span class="preprocessor"> .container</span>;</span></span><br><span class="line">    <span class="attribute">border</span><span class="value">: <span class="number">4px</span> solid orange;</span></span><br><span class="line">    <span class="attribute">background-color</span><span class="value">: <span class="hexcolor">#eee</span>;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>Here is a generated result:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.container</span>, <span class="class">.container--shopping-cart</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid grey</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">font-family</span>:<span class="value"> Arial, sans-serif</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line">  <span class="class">.container--shopping-cart</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">4px</span> solid orange</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#eee</span></span></span>;</span><br><span class="line">  &#125;</span></span><br></pre></td></tr></table></figure></p>
<p>Looks nice, now we can use both <code>.container</code> and <code>.container--shopping-cart</code> independently and CSS result still looks good. However <code>@extend</code> should be used carefully, as it might significantly increase the size of your CSS file or <a href="http://csswizardry.com/2014/11/when-to-use-extend-when-to-use-a-mixin/" target="_blank" rel="external">jumble specificity</a>.</p>
<p>So what can we do here to take advantage of behaviour which <code>@extend</code> gives us, but without any risk? Here is a pure CSS solution:<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.container</span>, <span class="attr_selector">[class^="container--"]</span>, <span class="attr_selector">[class*=" container--"]</span> &#123;</span><br><span class="line">  <span class="attribute">border</span><span class="value">: <span class="number">1px</span> solid grey;</span></span><br><span class="line">  <span class="attribute">padding</span><span class="value">: <span class="number">10px</span>;</span></span><br><span class="line">  <span class="attribute">font-family</span><span class="value">: Arial, sans-serif;</span></span><br><span class="line">&#125;</span><br><span class="line">  <span class="class">.container--shopping-cart</span> &#123;</span><br><span class="line">    <span class="attribute">border</span><span class="value">: <span class="number">4px</span> solid orange;</span></span><br><span class="line">    <span class="attribute">background-color</span><span class="value">: <span class="hexcolor">#eee</span>;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p> It is going to work if your BEM modifiers start with <code>%base%--</code>. Pretty much the only time when you want to extend something is when you need to take base styles and modify them in a way. <code>[class^=&quot;container--&quot;]</code> is taking care of a case when classname starts with selector, while <code>[class*=&quot; container--&quot;]</code> takes care of cases when selector is in the middle or at the end of classname. I noticed that <a href="https://icomoon.io/" target="_blank" rel="external">iconmoon</a> icon font generator is using that approach too. So now html could be simplified to following:<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container--shopping-cart"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container__content--special-offer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h2</span> <span class="attribute">class</span>=<span class="value">"container__title"</span>&gt;</span>Title<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Project_organization_tips">Project organization tips</h2><p> <a href="https://github.com/inuitcss/getting-started" target="_blank" rel="external">Inuit css</a> is a great example of how css project could be organized. You don’t have to use styles from inuit if you don’t want to. As long as you follow the same <em>simple</em> rules as outlined in getting started guide, your components will be reusable, while project will be scalable and maintainable. Note how files in inuit are namespaced, you’ll get similar benefits as described in an article <a href="http://csswizardry.com/2015/03/more-transparent-ui-code-with-namespaces/" target="_blank" rel="external">More Transparent UI Code with Namespaces</a>, and you don’t necessary have to prefix all your classnames with namespaces. </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Maintainability of CSS project highly depends on developer’s choices, on how a project was originally planned. Due to CSS cascading natur]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Asynchronous programming with ES6 generators, promises and npm-co]]></title>
    <link href="http://webuniverse.io/asynchronous-programming-with-ES6-generators-promises-and-npm-co/"/>
    <id>http://webuniverse.io/asynchronous-programming-with-ES6-generators-promises-and-npm-co/</id>
    <published>2015-02-03T23:20:00.000Z</published>
    <updated>2015-10-25T18:15:17.688Z</updated>
    <content type="html"><![CDATA[<p>This article explains what an npm <code>co</code> module is, how it works and how it can help you to write much cleaner and simpler asynchronous code.</p>
<h2 id="The_problem">The problem</h2><p>Writing asynchronous code could be very tricky, if you never did it before or didn’t learn or develop good patterns to approach it. Asynchronous programming in javascript became popular with arrival of single page applications and node.js (where most of the operations happen asynchronously by default). Traditionally javascript was handling async operations using callbacks, and at least once every web developer faced a problem called <a href="https://www.google.ca/search?q=callback+hell+definition&amp;tbm=isch" target="_blank" rel="external"><code>callback hell</code></a> or <code>pyramid of doom</code>.</p>
<h2 id="Solutions">Solutions</h2><p>A simple solution is to keep your code shallow, though error handling wouldn’t be that simple. Another one, very well established solution is to use promises. Using ES6 generators we can simplify code for promises and continue writing code in a synchronous, easy to follow, manner, while keeping it asynchronous. If you’re not familiar with how <a href="#promises">promises</a> or <a href="#generators">generators</a> are working, please do a quick research before you continue reading.</p>
<h3 id="co_to_the_rescue">co to the rescue</h3><p>co is a wrapper around promises and generators which allows to simplify asynchronous code a lot. Take a look at the example which shows how an async code could be written in a sync manner using co:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">co(<span class="function"><span class="keyword">function</span>* <span class="title">getResults</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//assume read and request perform asynchronous actions</span></span><br><span class="line">  <span class="keyword">var</span> a = read(<span class="string">'index.js'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">  <span class="keyword">var</span> b = request(<span class="string">'http://google.ca'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//when all operations will finish </span></span><br><span class="line">  <span class="comment">//res will have contents of index.js at [0]</span></span><br><span class="line">  <span class="comment">//and response body from google at [1]</span></span><br><span class="line">  <span class="keyword">var</span> res = <span class="keyword">yield</span> [a, b];</span><br><span class="line">  <span class="comment">//...code which does something with res</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">ex</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//if an error was thrown from read or request functions</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>Here is what co will do for us:</p>
<ul>
<li>Both read and request will execute in parallel on line 7 and when both of them finish - res array will hold results. It doesn’t matter if request finishes before read - co will ensure that results are assigned to appropriate indexes.</li>
<li>On node.js you would have to check for errors in both callbacks for read and request functions, to ensure that your application does not exit in an unhandled state, but with co we can only worry about an end result and add a single error handler using <code>.catch</code>.</li>
<li>Code is rather short and easy to understand</li>
</ul>
<p>So what exactly is happening? How does it work? To understand it better lets go over code of the main function in co and describe it. <a href="https://github.com/tj/co/blob/48ca4dcfa6b6a7396aef57e8d78928cfffc814bc/index.js#L41" target="_blank" rel="external">Open</a> code in new window so that you can put it side by side.</p>
<p>Let`s modify example just a little, in order to show how various scenarios will work in co:<br><figure class="highlight js"><figcaption><span>example.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">co(<span class="function"><span class="keyword">function</span>* <span class="title">getResults</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//not really doing anything important,</span></span><br><span class="line">  <span class="comment">//but will be useful to show how co works</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ex.message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//assume read and request perform asynchronous actions</span></span><br><span class="line">  <span class="keyword">var</span> a = read(<span class="string">'index.js'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">  <span class="keyword">var</span> b = request(<span class="string">'http://google.ca'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//when all operations will finish </span></span><br><span class="line">  <span class="comment">//res will have contents of index.js at [0]</span></span><br><span class="line">  <span class="comment">//and response body from google at [1]</span></span><br><span class="line">  <span class="keyword">var</span> res = <span class="keyword">yield</span> [a, b];</span><br><span class="line">  <span class="comment">//...code, which does something with res</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">ex</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//if an error was thrown from read or request functions</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>First co saves context reference, in case you will ever want to use a context inside read or request functions:<br><figure class="highlight js"><figcaption><span>co/index.js:co</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ctx = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Context binding example</span></span><br><span class="line">co.call(context, <span class="function"><span class="keyword">function</span>* <span class="title">getResults</span>(<span class="params"></span>) </span>&#123;<span class="comment">/*'this' will point to context*/</span>&#125;)</span><br></pre></td></tr></table></figure></p>
<p>Then it checks, if <code>gen</code> is a function. If it is, then co needs to initialize a generator object by calling a function and it also ensure that <code>this</code> has a proper context. If <code>gen</code> is already a generator object, a statement will be skipped:<br><figure class="highlight js"><figcaption><span>co/index.js:co</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> gen === <span class="string">'function'</span>) gen = gen.call(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure></p>
<p>Then co returns a new Promise and runs <code>onFulfilled</code> function with no arguments. Inside that function it will try to execute a generator code until a first <code>yield</code> statement.<br><figure class="highlight js"><figcaption><span>co/index.js:onFulfilled</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ret;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  ret = gen.next(res); <span class="comment">//res is undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>In our case following code would execute inside <code>getResults</code> generator:<br><figure class="highlight js"><figcaption><span>example.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>If that code could throw an error - promise would be rejected with an error object and co would exit.<br><figure class="highlight js"><figcaption><span>co/index.js:onFulfilled</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="keyword">return</span> reject(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>In our case generator returns an object with a <code>value</code> property containing yielded value and this object is assigned to <code>ret</code>. At that moment of time code would look like that:<br><figure class="highlight js"><figcaption><span>co/index.js:onFulfilled</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ret;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  ret = &#123;value: <span class="literal">false</span>, done: <span class="literal">false</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Then <code>onFulfilled</code> will call <code>next(ret);</code>. If <code>done</code> would be true, co would resolve a promise with the value and exit from next:<br><figure class="highlight js"><figcaption><span>co/index.js:next</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ret.done) <span class="keyword">return</span> resolve(ret.value);</span><br></pre></td></tr></table></figure></p>
<p>Otherwise co attempts to convert <code>ret.value</code> to a promise (we’ll skip <code>toPromise</code> for now). <code>.call</code> is there to provide original context in case <code>ret.value</code> is another <a href="https://github.com/tj/co#yieldables" target="_blank" rel="external">yieldable</a> value:<br><figure class="highlight js"><figcaption><span>co/index.js:next</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = toPromise.call(ctx, ret.value);</span><br></pre></td></tr></table></figure></p>
<p>On next line co checks if value is not falsy and if it is a promise, and if so, it adds appropriate handlers for promise fulfilment or rejection and exits from next.<br><figure class="highlight js"><figcaption><span>co/index.js:next</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (value &amp;&amp; isPromise(value)) <span class="keyword">return</span> value.then(onFulfilled, onRejected);</span><br></pre></td></tr></table></figure></p>
<p>Notice how <code>onFulfilled</code>, <code>onRejected</code> and <code>next</code> functions have references to <code>resolve</code> and <code>reject</code> callbacks from a new Promise, which was created at the beginning. If one of these functions calls <code>resolve</code> or <code>reject</code>, then top most promise will be settled. </p>
<p>In our case <code>ret.value</code> in our case is <code>false</code>, so next calls <code>onRejected</code> handler, passes it a new TypeError and exits.<br><figure class="highlight js"><figcaption><span>co/index.js:next</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> onRejected(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'You may only yield a function, promise, generator, array, or object, '</span></span><br><span class="line">        + <span class="string">'but the following object was passed: "'</span> + <span class="built_in">String</span>(ret.value) + <span class="string">'"'</span>));</span><br></pre></td></tr></table></figure></p>
<p><code>onRejected</code> is working quite similar to <code>onFulfilled</code> function with the following difference - instead of running a code until next <code>yield</code> statement, it tries to throw an error inside generator function <em>at the place where it stopped before</em>:<br><figure class="highlight js"><figcaption><span>co/index.js:onRejected</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ret;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  ret = gen.throw(err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>That means it will replace <code>yield false</code> with <code>throw err</code> and example would look like this:<br><figure class="highlight js"><figcaption><span>example.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> err; <span class="comment">//err is a TypeError</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ex.message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>That behaviour is completely normal for generators and is described on MDN:<br><blockquote><p>You can force a generator to throw an exception by calling its throw() method and passing the exception value it should throw. This exception will be thrown from the current suspended context of the generator, as if the yield that is currently suspended were instead a throw value statement.</p>
<footer><strong>MDN</strong><cite><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators" target="_blank" rel="external">developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators</a></cite></footer></blockquote><br>At that moment execution flow will get back to example code and, because an error was handled with try-catch, it will be logged in console. Example will continue execution until it will either reach the end of generator or face a new <code>yield</code>:<br><figure class="highlight js"><figcaption><span>example.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = read(<span class="string">'index.js'</span>, <span class="string">'utf8'</span>);</span><br><span class="line"><span class="keyword">var</span> b = request(<span class="string">'http://google.ca'</span>);</span><br><span class="line"><span class="keyword">var</span> res = <span class="keyword">yield</span> [a, b];</span><br></pre></td></tr></table></figure></p>
<p>So result of calling <code>gen.throw</code> in <code>onRejected</code> returns an array with a and b:<br><figure class="highlight js"><figcaption><span>co/index.js:onRejected</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ret;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  ret = &#123;value: [a, b], done: <span class="literal">false</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Catch brunch is skipped but it would otherwise reject the promise. Finally, another <code>next</code> call happens: it would skip immediate resolve, convert array to a promise created with Promise.all (check out <code>arrayToPromise</code> function), which will be settled only when <code>a</code> and <code>b</code> promises are settled or one of them is rejected. Note how <code>arrayToPromise</code> is making sure that Promise.all argument is an array of promises:<br><figure class="highlight js"><figcaption><span>co/index.js:arrayToPromise</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.map(toPromise, <span class="keyword">this</span>)</span><br></pre></td></tr></table></figure></p>
<p><code>toPromise</code> will first check if value is not falsy and if it is, it returns a value:<br><figure class="highlight js"><figcaption><span>co/index.js:toPromise</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!obj) <span class="keyword">return</span> obj;</span><br></pre></td></tr></table></figure></p>
<p>If value is a promise already, toPromise will return it:<br><figure class="highlight js"><figcaption><span>co/index.js:toPromise</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isPromise(obj)) <span class="keyword">return</span> obj;</span><br></pre></td></tr></table></figure></p>
<p>If value is a generator or a generator function, toPromise will recursively call co, pass it a context and an obj and as a result we will get a new promise:<br><figure class="highlight js"><figcaption><span>co/index.js:toPromise</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isGeneratorFunction(obj) || isGenerator(obj)) <span class="keyword">return</span> co.call(<span class="keyword">this</span>, obj);</span><br></pre></td></tr></table></figure></p>
<p>If <code>obj</code> is a function, toPromise will wrap it in a promise. First argument in a function is assumed to be an error object (node.js error handling pattern, so all node js callback APIs are covered):<br><figure class="highlight js"><figcaption><span>co/index.js:toPromise</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">'function'</span> == <span class="keyword">typeof</span> obj) <span class="keyword">return</span> thunkToPromise.call(<span class="keyword">this</span>, obj);</span><br></pre></td></tr></table></figure></p>
<p>If <code>obj</code> is an array or an object with <a href="https://github.com/tj/co#yieldables" target="_blank" rel="external">yieldable</a> properties, co will recursively convert them to promises:<br><figure class="highlight js"><figcaption><span>co/index.js:toPromise</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(obj)) <span class="keyword">return</span> arrayToPromise.call(<span class="keyword">this</span>, obj);</span><br><span class="line"><span class="keyword">if</span> (isObject(obj)) <span class="keyword">return</span> objectToPromise.call(<span class="keyword">this</span>, obj);</span><br></pre></td></tr></table></figure></p>
<p>So co ensures that <code>a</code> and <code>b</code> are converted to promises, and when both promises are fulfilled - Promise.all will ensure that results are assigned to appropriate indexes in an array. If one of them is rejected, then <code>.catch</code> callback from the example will be able to handle an error (log it somewhere, or re-try once again). In either scenario a new Promise (one returned from co at the very beginning) will be settled, code will be executed asynchronously, and in the manner expected by developer, and will have all benefits of central place for error handling.</p>
<p>In a nutshell this is exactly what happens in co: generators and promises take care of asynchronous operations and error handling, while keeping your code clean and easy to follow. Similar logic will be hidden behind a native support of async programming with <a href="https://www.youtube.com/watch?v=DqMFX91ToLw" target="_blank" rel="external">ES7 async-await</a>. If you want to use co, generators and Promises in non ES6 environments, try out 6to5 transpiler (links below).</p>
<p>Thank you and please feel free to ask questions in the comments, follow us on <a href="https://www.facebook.com/webuniverseio" target="_blank" rel="external">facebook</a> and <a href="https://twitter.com/webuniverseio" target="_blank" rel="external">twitter</a> pages, or subscribe to our <a href="/atom.xml">feed</a>.</p>
<h2 id="Links">Links</h2><ul>
<li>co - <a href="https://github.com/tj/co" target="_blank" rel="external">https://github.com/tj/co</a>  </li>
<li>shallow code - <a href="http://exponential.io/blog/unnest-callbacks/" target="_blank" rel="external">http://exponential.io/blog/unnest-callbacks/</a></li>
<li>6to5 transpiler (babeljs) - <a href="https://babeljs.io/docs/learn-es6/" target="_blank" rel="external">https://babeljs.io/docs/learn-es6/</a></li>
</ul>
<h3 id="Promises">Promises<a name="promises"></a></h3><ul>
<li>description - <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="external">https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></li>
<li>support - <a href="http://kangax.github.io/compat-table/es6/#Promise" target="_blank" rel="external">http://kangax.github.io/compat-table/es6/#Promise</a></li>
<li>examples - <a href="http://www.2ality.com/2014/09/es6-promises-foundations.html" target="_blank" rel="external">http://www.2ality.com/2014/09/es6-promises-foundations.html</a></li>
</ul>
<h3 id="Generators">Generators<a name="generators"></a></h3><ul>
<li>description and examples - <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function</a>*</li>
<li>support - <a href="http://kangax.github.io/compat-table/es6/#generators" target="_blank" rel="external">http://kangax.github.io/compat-table/es6/#generators</a></li>
</ul>
<style type="text/css">.article__title {font-size: 1.72rem;}</style>]]></content>
    <summary type="html">
    <![CDATA[<p>This article explains what an npm <code>co</code> module is, how it works and how it can help you to write much cleaner and simpler async]]>
    </summary>
    
  </entry>
  
</feed>
